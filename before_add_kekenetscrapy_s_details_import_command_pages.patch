Index: .editorconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .editorconfig	(revision )
+++ .editorconfig	(revision )
@@ -0,0 +1,29 @@
+# http://editorconfig.org
+
+root = true
+
+[*]
+charset = utf-8
+end_of_line = lf
+insert_final_newline = true
+trim_trailing_whitespace = true
+
+[*.{py,rst,ini}]
+indent_style = space
+indent_size = 4
+
+[*.py]
+line_length=120
+known_first_party=zhiliao
+multi_line_output=3
+default_section=THIRDPARTY
+
+[*.{html,css,scss,json,yml}]
+indent_style = space
+indent_size = 2
+
+[*.md]
+trim_trailing_whitespace = false
+
+[Makefile]
+indent_style = tab
Index: templates/pages/about.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/pages/about.html	(revision )
+++ templates/pages/about.html	(revision )
@@ -0,0 +1,15 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>关于我们</title>
+</head>
+<body>
+<h1>发展历程</h1>
+<ul>
+    <li>2015.12月,由周婵女士创立知了英语。</li>
+    <li>原《疯狂英语杂志》</li>
+    <li>原《英语九百句》主编</li>
+</ul>
+</body>
+</html>
\ No newline at end of file
Index: zhiliao/users/tests/test_views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/tests/test_views.py	(revision )
+++ zhiliao/users/tests/test_views.py	(revision )
@@ -0,0 +1,64 @@
+from django.test import RequestFactory
+
+from test_plus.test import TestCase
+
+from ..views import (
+    UserRedirectView,
+    UserUpdateView
+)
+
+
+class BaseUserTestCase(TestCase):
+
+    def setUp(self):
+        self.user = self.make_user()
+        self.factory = RequestFactory()
+
+
+class TestUserRedirectView(BaseUserTestCase):
+
+    def test_get_redirect_url(self):
+        # Instantiate the view directly. Never do this outside a test!
+        view = UserRedirectView()
+        # Generate a fake request
+        request = self.factory.get('/fake-url')
+        # Attach the user to the request
+        request.user = self.user
+        # Attach the request to the view
+        view.request = request
+        # Expect: '/users/testuser/', as that is the default username for
+        #   self.make_user()
+        self.assertEqual(
+            view.get_redirect_url(),
+            '/users/testuser/'
+        )
+
+
+class TestUserUpdateView(BaseUserTestCase):
+
+    def setUp(self):
+        # call BaseUserTestCase.setUp()
+        super(TestUserUpdateView, self).setUp()
+        # Instantiate the view directly. Never do this outside a test!
+        self.view = UserUpdateView()
+        # Generate a fake request
+        request = self.factory.get('/fake-url')
+        # Attach the user to the request
+        request.user = self.user
+        # Attach the request to the view
+        self.view.request = request
+
+    def test_get_success_url(self):
+        # Expect: '/users/testuser/', as that is the default username for
+        #   self.make_user()
+        self.assertEqual(
+            self.view.get_success_url(),
+            '/users/testuser/'
+        )
+
+    def test_get_object(self):
+        # Expect: self.user, as that is the request's user object
+        self.assertEqual(
+            self.view.get_object(),
+            self.user
+        )
Index: config/settings/production.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/settings/production.py	(revision )
+++ config/settings/production.py	(revision )
@@ -0,0 +1,207 @@
+# -*- coding: utf-8 -*-
+'''
+Production Configurations
+
+- Use djangosecure
+- Use Amazon's S3 for storing static files and uploaded media
+- Use mailgun to send emails
+- Use Redis on Heroku
+
+- Use sentry for error logging
+
+'''
+from __future__ import absolute_import, unicode_literals
+
+from boto.s3.connection import OrdinaryCallingFormat
+from django.utils import six
+
+import logging
+
+
+from .common import *  # noqa
+
+# SECRET CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
+# Raises ImproperlyConfigured exception if DJANGO_SECRET_KEY not in os.environ
+SECRET_KEY = env("DJANGO_SECRET_KEY")
+
+# This ensures that Django will be able to detect a secure connection
+# properly on Heroku.
+SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
+
+# django-secure
+# ------------------------------------------------------------------------------
+INSTALLED_APPS += ("djangosecure", )
+# raven sentry client
+# See https://docs.getsentry.com/hosted/clients/python/integrations/django/
+INSTALLED_APPS += ('raven.contrib.django.raven_compat', )
+SECURITY_MIDDLEWARE = (
+    'djangosecure.middleware.SecurityMiddleware',
+)
+RAVEN_MIDDLEWARE = ('raven.contrib.django.raven_compat.middleware.Sentry404CatchMiddleware',
+                    'raven.contrib.django.raven_compat.middleware.SentryResponseErrorIdMiddleware',)
+MIDDLEWARE_CLASSES = SECURITY_MIDDLEWARE + \
+    RAVEN_MIDDLEWARE + MIDDLEWARE_CLASSES
+
+
+# set this to 60 seconds and then to 518400 when you can prove it works
+SECURE_HSTS_SECONDS = 60
+SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(
+    "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
+SECURE_FRAME_DENY = env.bool("DJANGO_SECURE_FRAME_DENY", default=True)
+SECURE_CONTENT_TYPE_NOSNIFF = env.bool(
+    "DJANGO_SECURE_CONTENT_TYPE_NOSNIFF", default=True)
+SECURE_BROWSER_XSS_FILTER = True
+SESSION_COOKIE_SECURE = False
+SESSION_COOKIE_HTTPONLY = True
+SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
+
+# SITE CONFIGURATION
+# ------------------------------------------------------------------------------
+# Hosts/domain names that are valid for this site
+# See https://docs.djangoproject.com/en/1.6/ref/settings/#allowed-hosts
+ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS', default=['zhiliao.zhi12.net'])
+# END SITE CONFIGURATION
+
+INSTALLED_APPS += ("gunicorn", )
+
+# STORAGE CONFIGURATION
+# ------------------------------------------------------------------------------
+# Uploaded Media Files
+# ------------------------
+# See: http://django-storages.readthedocs.org/en/latest/index.html
+INSTALLED_APPS += (
+    'storages',
+)
+DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
+
+AWS_ACCESS_KEY_ID = env('DJANGO_AWS_ACCESS_KEY_ID')
+AWS_SECRET_ACCESS_KEY = env('DJANGO_AWS_SECRET_ACCESS_KEY')
+AWS_STORAGE_BUCKET_NAME = env('DJANGO_AWS_STORAGE_BUCKET_NAME')
+AWS_AUTO_CREATE_BUCKET = True
+AWS_QUERYSTRING_AUTH = False
+AWS_S3_CALLING_FORMAT = OrdinaryCallingFormat()
+
+# AWS cache settings, don't change unless you know what you're doing:
+AWS_EXPIRY = 60 * 60 * 24 * 7
+
+# TODO See: https://github.com/jschneier/django-storages/issues/47
+# Revert the following and use str after the above-mentioned bug is fixed in
+# either django-storage-redux or boto
+AWS_HEADERS = {
+    'Cache-Control': six.b('max-age=%d, s-maxage=%d, must-revalidate' % (
+        AWS_EXPIRY, AWS_EXPIRY))
+}
+
+# URL that handles the media served from MEDIA_ROOT, used for managing
+# stored files.
+MEDIA_URL = 'https://s3.amazonaws.com/%s/' % AWS_STORAGE_BUCKET_NAME
+
+# Static Assets
+# ------------------------
+STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'
+
+
+# EMAIL
+# ------------------------------------------------------------------------------
+DEFAULT_FROM_EMAIL = env('DJANGO_DEFAULT_FROM_EMAIL',
+                         default='zhiliao <noreply@zhiliao.zhi12.net>')
+EMAIL_BACKEND = 'django_mailgun.MailgunBackend'
+MAILGUN_ACCESS_KEY = env('DJANGO_MAILGUN_API_KEY')
+MAILGUN_SERVER_NAME = env('DJANGO_MAILGUN_SERVER_NAME')
+EMAIL_SUBJECT_PREFIX = env("DJANGO_EMAIL_SUBJECT_PREFIX", default='[zhiliao] ')
+SERVER_EMAIL = env('DJANGO_SERVER_EMAIL', default=DEFAULT_FROM_EMAIL)
+NEW_RELIC_LICENSE_KEY = env('NEW_RELIC_LICENSE_KEY')
+NEW_RELIC_APP_NAME = 'zhiliao'
+
+# TEMPLATE CONFIGURATION
+# ------------------------------------------------------------------------------
+# See:
+# https://docs.djangoproject.com/en/dev/ref/templates/api/#django.template.loaders.cached.Loader
+TEMPLATES[0]['OPTIONS']['loaders'] = [
+    ('django.template.loaders.cached.Loader', [
+        'django.template.loaders.filesystem.Loader', 'django.template.loaders.app_directories.Loader', ]),
+]
+
+# DATABASE CONFIGURATION
+# ------------------------------------------------------------------------------
+# Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
+DATABASES['default'] = env.db("DATABASE_URL")
+
+# CACHING
+# ------------------------------------------------------------------------------
+# Heroku URL does not pass the DB number, so we parse it in
+CACHES = {
+    "default": {
+        "BACKEND": "django_redis.cache.RedisCache",
+        "LOCATION": "{0}/{1}".format(env.cache_url('REDIS_URL', default="redis://127.0.0.1:6379"), 0),
+        "OPTIONS": {
+            "CLIENT_CLASS": "django_redis.client.DefaultClient",
+            "IGNORE_EXCEPTIONS": True,  # mimics memcache behavior.
+                                        # http://niwinz.github.io/django-redis/latest/#_memcached_exceptions_behavior
+        }
+    }
+}
+
+
+# Sentry Configuration
+SENTRY_DSN = env('DJANGO_SENTRY_DSN')
+SENTRY_CLIENT = env('DJANGO_SENTRY_CLIENT', default='raven.contrib.django.raven_compat.DjangoClient')
+LOGGING = {
+    'version': 1,
+    'disable_existing_loggers': True,
+    'root': {
+        'level': 'WARNING',
+        'handlers': ['sentry'],
+    },
+    'formatters': {
+        'verbose': {
+            'format': '%(levelname)s %(asctime)s %(module)s '
+                      '%(process)d %(thread)d %(message)s'
+        },
+    },
+    'handlers': {
+        'sentry': {
+            'level': 'ERROR',
+            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
+        },
+        'console': {
+            'level': 'DEBUG',
+            'class': 'logging.StreamHandler',
+            'formatter': 'verbose'
+        }
+    },
+    'loggers': {
+        'django.db.backends': {
+            'level': 'ERROR',
+            'handlers': ['console'],
+            'propagate': False,
+        },
+        'raven': {
+            'level': 'DEBUG',
+            'handlers': ['console'],
+            'propagate': False,
+        },
+        'sentry.errors': {
+            'level': 'DEBUG',
+            'handlers': ['console'],
+            'propagate': False,
+        },
+        'django.security.DisallowedHost': {
+            'level': 'ERROR',
+            'handlers': ['console', 'sentry'],
+            'propagate': False,
+        },
+    },
+}
+SENTRY_CELERY_LOGLEVEL = env.int('DJANGO_SENTRY_LOG_LEVEL', logging.INFO)
+RAVEN_CONFIG = {
+    'CELERY_LOGLEVEL': env.int('DJANGO_SENTRY_LOG_LEVEL', logging.INFO),
+    'DSN': SENTRY_DSN
+}
+
+# Custom Admin URL, use {% url 'admin:index' %}
+ADMIN_URL = env('DJANGO_ADMIN_URL')
+
+# Your production stuff: Below this line define 3rd party library settings
Index: compose/nginx/nginx.conf
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- compose/nginx/nginx.conf	(revision )
+++ compose/nginx/nginx.conf	(revision )
@@ -0,0 +1,53 @@
+user  nginx;
+worker_processes  1;
+
+error_log  /var/log/nginx/error.log warn;
+pid        /var/run/nginx.pid;
+
+
+events {
+    worker_connections  1024;
+}
+
+
+http {
+    include       /etc/nginx/mime.types;
+    default_type  application/octet-stream;
+
+    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
+                      '$status $body_bytes_sent "$http_referer" '
+                      '"$http_user_agent" "$http_x_forwarded_for"';
+
+    access_log  /var/log/nginx/access.log  main;
+
+    sendfile        on;
+    #tcp_nopush     on;
+
+    keepalive_timeout  65;
+
+    #gzip  on;
+
+    upstream app {
+        server django:5000;
+    }
+
+    server {
+        listen 80;
+        charset     utf-8;
+
+
+        location / {
+            # checks for static file, if not found proxy to app
+            try_files $uri @proxy_to_app;
+        }
+
+        location @proxy_to_app {
+            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+            proxy_set_header Host $http_host;
+            proxy_redirect off;
+
+            proxy_pass   http://app;
+        }
+
+    }
+}
\ No newline at end of file
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision )
+++ package.json	(revision )
@@ -0,0 +1,21 @@
+{
+  "name": "zhiliao",
+  "version": "0.1.0",
+  "dependencies": {},
+  "devDependencies": {
+    "grunt": "~0.4.5",
+    "grunt-contrib-watch": "~0.6.1",
+    "grunt-bg-shell": "~2.3.1",
+    "connect-livereload": "~0.3.2",
+    "time-grunt": "~1.2.1",
+    "load-grunt-tasks": "~3.2.0",
+    "grunt-sass": "~1.0.0",
+    "grunt-postcss": "~0.5.5",
+    "cssnano": "~2.1.0",
+    "autoprefixer-core": "~5.2.1",
+    "pixrem": "~1.3.1"
+  },
+  "engines": {
+    "node": ">=0.8.0"
+  }
+}
Index: staticfiles/js/html5.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- staticfiles/js/html5.js	(revision )
+++ staticfiles/js/html5.js	(revision )
@@ -0,0 +1,8 @@
+/*
+ HTML5 Shiv v3.7.0 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
+*/
+(function(l,f){function m(){var a=e.elements;return"string"==typeof a?a.split(" "):a}function i(a){var b=n[a[o]];b||(b={},h++,a[o]=h,n[h]=b);return b}function p(a,b,c){b||(b=f);if(g)return b.createElement(a);c||(c=i(b));b=c.cache[a]?c.cache[a].cloneNode():r.test(a)?(c.cache[a]=c.createElem(a)).cloneNode():c.createElem(a);return b.canHaveChildren&&!s.test(a)?c.frag.appendChild(b):b}function t(a,b){if(!b.cache)b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag();
+a.createElement=function(c){return!e.shivMethods?b.createElem(c):p(c,a,b)};a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+m().join().replace(/[\w\-]+/g,function(a){b.createElem(a);b.frag.createElement(a);return'c("'+a+'")'})+");return n}")(e,b.frag)}function q(a){a||(a=f);var b=i(a);if(e.shivCSS&&!j&&!b.hasCSS){var c,d=a;c=d.createElement("p");d=d.getElementsByTagName("head")[0]||d.documentElement;c.innerHTML="x<style>article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}</style>";
+c=d.insertBefore(c.lastChild,d.firstChild);b.hasCSS=!!c}g||t(a,b);return a}var k=l.html5||{},s=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,r=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,j,o="_html5shiv",h=0,n={},g;(function(){try{var a=f.createElement("a");a.innerHTML="<xyz></xyz>";j="hidden"in a;var b;if(!(b=1==a.childNodes.length)){f.createElement("a");var c=f.createDocumentFragment();b="undefined"==typeof c.cloneNode||
+"undefined"==typeof c.createDocumentFragment||"undefined"==typeof c.createElement}g=b}catch(d){g=j=!0}})();var e={elements:k.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video",version:"3.7.0",shivCSS:!1!==k.shivCSS,supportsUnknownElements:g,shivMethods:!1!==k.shivMethods,type:"default",shivDocument:q,createElement:p,createDocumentFragment:function(a,b){a||(a=f);
+if(g)return a.createDocumentFragment();for(var b=b||i(a),c=b.frag.cloneNode(),d=0,e=m(),h=e.length;d<h;d++)c.createElement(e[d]);return c}};l.html5=e;q(f)})(this,document);
Index: tests/system.packages
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/system.packages	(revision )
+++ tests/system.packages	(revision )
@@ -0,0 +1,11 @@
+firefox
+libpq-dev
+llvm
+graphviz-dev
+libtiff4-dev
+libjpeg8-dev
+libfreetype6-dev
+liblcms1-dev
+libwebp-dev
+zlib1g-dev
+gettext
Index: zhiliao/taskapp/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/taskapp/__init__.py	(revision )
+++ zhiliao/taskapp/__init__.py	(revision )
@@ -0,0 +1,1 @@
+
\ No newline at end of file
Index: config/settings/local.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/settings/local.py	(revision )
+++ config/settings/local.py	(revision )
@@ -0,0 +1,86 @@
+# -*- coding: utf-8 -*-
+'''
+Local settings
+
+- Run in Debug mode
+- Use console backend for emails
+- Add Django Debug Toolbar
+- Add django-extensions as app
+'''
+import environ
+
+from .mysqlconf import *
+
+from .common import *  # noqa
+
+# mezzanine app settings
+from .mezzaconf import *
+
+
+# DEBUG
+# ------------------------------------------------------------------------------
+DEBUG = env.bool('DJANGO_DEBUG', default=True)
+TEMPLATES[0]['OPTIONS']['debug'] = DEBUG
+
+# SECRET CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
+# Note: This key only used for development and testing.
+SECRET_KEY = env("DJANGO_SECRET_KEY", default='dwqfjwf&q-8+#ko-#8k)jpf#h8bp(@515@x@l#=w3ktswereue')
+
+# Mail settings
+# ------------------------------------------------------------------------------
+EMAIL_HOST = 'localhost'
+EMAIL_PORT = 1025
+
+
+# CACHING
+# ------------------------------------------------------------------------------
+CACHES = {
+    'default': {
+        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
+        'LOCATION': ''
+    }
+}
+
+# django-debug-toolbar
+# ------------------------------------------------------------------------------
+MIDDLEWARE_CLASSES += ('debug_toolbar.middleware.DebugToolbarMiddleware',)
+INSTALLED_APPS += ('debug_toolbar', )
+
+INTERNAL_IPS = ('127.0.0.1', '10.0.2.2',)
+
+DEBUG_TOOLBAR_CONFIG = {
+    'DISABLE_PANELS': [
+        'debug_toolbar.panels.redirects.RedirectsPanel',
+    ],
+    'SHOW_TEMPLATE_CONTEXT': True,
+    'JQUERY_URL': 'http://libs.baidu.com/jquery/2.1.4/jquery.min.js',
+}
+
+# django-extensions
+# ------------------------------------------------------------------------------
+INSTALLED_APPS += ('django_extensions', )
+
+# TESTING
+# ------------------------------------------------------------------------------
+TEST_RUNNER = 'django.test.runner.DiscoverRunner'
+
+# Your local stuff: Below this line define 3rd party library settings
+
+####################
+# DYNAMIC SETTINGS #
+####################
+
+# set_dynamic_settings() will rewrite globals based on what has been
+# defined so far, in order to provide some better defaults where
+# applicable. We also allow this settings module to be imported
+# without Mezzanine installed, as the case may be when using the
+# fabfile, where setting the dynamic settings below isn't strictly
+# required.
+try:
+    from zhiliao.utils.conf import set_dynamic_settings
+except ImportError:
+    pass
+else:
+    set_dynamic_settings(globals())
\ No newline at end of file
Index: requirements/base.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements/base.txt	(revision )
+++ requirements/base.txt	(revision )
@@ -0,0 +1,44 @@
+# Bleeding edge Django
+django==1.8.6
+
+# Configuration
+django-environ==0.4.0
+django-secure==1.0.1
+whitenoise==2.0.4
+
+
+# Forms
+django-braces==1.8.1
+django-crispy-forms==1.5.2
+django-floppyforms==1.5.2
+
+# Models
+django-model-utils==2.3.1
+
+# Images
+Pillow==3.0.0
+
+# For user registration, either via email or social
+# Well-built with regular release cycles!
+django-allauth==0.23.0
+
+
+# Python-PostgreSQL Database Adapter
+psycopg2==2.6.1
+
+# Unicode slugification
+unicode-slugify==0.1.3
+django-autoslug==1.9.3
+
+# Time zones support
+pytz==2015.7
+
+# Redis support
+django-redis==4.3.0
+redis>=2.10.0
+
+
+celery==3.1.18
+
+
+# Your custom requirements go here
Index: requirements/local.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements/local.txt	(revision )
+++ requirements/local.txt	(revision )
@@ -0,0 +1,19 @@
+# Local development dependencies go here
+-r base.txt
+coverage==4.0.2
+Sphinx
+django-extensions==1.5.9
+Werkzeug==0.10.4
+django-test-plus==1.0.9
+factory_boy==2.5.2
+
+# django-debug-toolbar that works with Django 1.5+
+django-debug-toolbar==1.3.2.
+
+# improved REPL
+ipdb==0.8.1
+
+# Required by maildump.
+gevent==1.0.2
+# Enables better email testing
+maildump==0.5.1
Index: docs/install.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/install.rst	(revision )
+++ docs/install.rst	(revision )
@@ -0,0 +1,4 @@
+Install
+=========
+
+This is where you write how to get a new laptop to run this project.
Index: Gruntfile.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Gruntfile.js	(revision )
+++ Gruntfile.js	(revision )
@@ -0,0 +1,145 @@
+module.exports = function (grunt) {
+
+  var appConfig = grunt.file.readJSON('package.json');
+
+  // Load grunt tasks automatically
+  // see: https://github.com/sindresorhus/load-grunt-tasks
+  require('load-grunt-tasks')(grunt);
+
+  // Time how long tasks take. Can help when optimizing build times
+  // see: https://npmjs.org/package/time-grunt
+  require('time-grunt')(grunt);
+
+  var pathsConfig = function (appName) {
+    this.app = appName || appConfig.name;
+
+    return {
+      app: this.app,
+      templates: this.app + '/templates',
+      css: this.app + '/static/css',
+      sass: this.app + '/static/sass',
+      fonts: this.app + '/static/fonts',
+      images: this.app + '/static/images',
+      js: this.app + '/static/js',
+      manageScript: 'manage.py',
+      mailserverpid: 'mailserver.pid',
+    }
+  };
+
+  grunt.initConfig({
+
+    paths: pathsConfig(),
+    pkg: appConfig,
+
+    // see: https://github.com/gruntjs/grunt-contrib-watch
+    watch: {
+      gruntfile: {
+        files: ['Gruntfile.js']
+      },
+      sass: {
+        files: ['<%= paths.sass %>/**/*.{scss,sass}'],
+        tasks: ['sass:dev'],
+        options: {
+          atBegin: true
+        }
+      },
+      livereload: {
+        files: [
+          '<%= paths.js %>/**/*.js',
+          '<%= paths.sass %>/**/*.{scss,sass}',
+          '<%= paths.app %>/**/*.html'
+          ],
+        options: {
+          spawn: false,
+          livereload: true,
+        },
+      },
+    },
+
+    // see: https://github.com/sindresorhus/grunt-sass
+    sass: {
+      dev: {
+          options: {
+              outputStyle: 'nested',
+              sourceMap: false,
+              precision: 10
+          },
+          files: {
+              '<%= paths.css %>/project.css': '<%= paths.sass %>/project.scss'
+          },
+      },
+      dist: {
+          options: {
+              outputStyle: 'compressed',
+              sourceMap: false,
+              precision: 10
+          },
+          files: {
+              '<%= paths.css %>/project.css': '<%= paths.sass %>/project.scss'
+          },
+      }
+    },
+    
+    //see https://github.com/nDmitry/grunt-postcss
+    postcss: {
+      options: {
+        map: true, // inline sourcemaps
+
+        processors: [
+          require('pixrem')(), // add fallbacks for rem units
+          require('autoprefixer-core')({browsers: [
+            'Android 2.3',
+            'Android >= 4',
+            'Chrome >= 20',
+            'Firefox >= 24',
+            'Explorer >= 8',
+            'iOS >= 6',
+            'Opera >= 12',
+            'Safari >= 6'
+          ]}), // add vendor prefixes
+          require('cssnano')() // minify the result
+        ]
+      },
+      dist: {
+        src: '<%= paths.css %>/*.css'
+      }
+    },
+
+    // see: https://npmjs.org/package/grunt-bg-shell
+    bgShell: {
+      _defaults: {
+        bg: true
+      },
+      runDjango: {
+        cmd: 'python <%= paths.manageScript %> runserver'
+      },
+      runMailDump: {
+        cmd: 'maildump -p <%= paths.mailserverpid %>'
+      },
+      stopMailDump: {
+        cmd: 'maildump -p <%= paths.mailserverpid %> --stop'
+      },
+    }
+  });
+
+  grunt.registerTask('serve', [
+    'bgShell:runDjango',
+    'watch'
+  ]);
+
+  grunt.registerTask('build', [
+    'sass:dist',
+    'postcss'
+  ]);
+
+  grunt.registerTask('default', [
+    'build'
+  ]);
+  grunt.registerTask('start-email-server', [
+      'bgShell:runMailDump'
+  ]);
+
+  grunt.registerTask('stop-email-server', [
+      'bgShell:stopMailDump'
+  ]);
+};
Index: app.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app.json	(revision )
+++ app.json	(revision )
@@ -0,0 +1,35 @@
+{
+  "name": "zhiliao",
+  "description": "a blog for english study",
+  "env": {
+    "BUILDPACK_URL": "https://github.com/heroku/heroku-buildpack-python",
+    "DJANGO_SETTINGS_MODULE": "config.settings.production",
+    "DJANGO_SECRET_KEY": {
+      "description": "A secret key for verifying the integrity of signed cookies.",
+      "generator": "secret"
+    },
+    "DJANGO_ALLOWED_HOSTS": {
+      "description": "Comma-separated list of hosts",
+      "value": ".herokuapp.com"
+    },
+    "DJANGO_ADMIN_URL": {
+      "description": "A secret URL for the Django admin",
+      "generator": "secret"
+    },
+    "DJANGO_AWS_ACCESS_KEY_ID": "",
+    "DJANGO_AWS_SECRET_ACCESS_KEY": "",
+    "DJANGO_AWS_STORAGE_BUCKET_NAME": "",
+    "DJANGO_MAILGUN_SERVER_NAME": "",
+    "NEW_RELIC_LICENSE_KEY": "",
+    "DJANGO_MAILGUN_API_KEY": "",
+    "DJANGO_SENTRY_DSN": "" 
+  },
+  "scripts": {
+    "postdeploy": "python manage.py migrate"
+  },
+  "addons": [
+    "heroku-postgresql:hobby-dev",
+    "heroku-redis:hobby-dev",
+    "mailgun"
+  ]
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision )
+++ .gitignore	(revision )
@@ -0,0 +1,63 @@
+### OSX ###
+.DS_Store
+.AppleDouble
+.LSOverride
+
+### SublimeText ###
+# cache files for sublime text
+*.tmlanguage.cache
+*.tmPreferences.cache
+*.stTheme.cache
+
+# workspace files are user-specific
+*.sublime-workspace
+
+# project files should be checked into the repository, unless a significant
+# proportion of contributors will probably not be using SublimeText
+# *.sublime-project
+
+# sftp configuration file
+sftp-config.json
+
+# Basics
+*.py[cod]
+*.pyc
+__pycache__
+
+# Logs
+*.log
+pip-log.txt
+
+# Unit test / coverage reports
+.coverage
+.tox
+nosetests.xml
+htmlcov
+
+# Translations
+*.mo
+*.pot
+
+# Pycharm
+.idea
+
+# Vim
+
+*~
+*.swp
+*.swo
+
+# npm
+node_modules/
+
+# Compass
+.sass-cache
+
+# virtual environments
+.env
+
+# User-uploaded media
+zhiliao/media/
+
+# Hitch directory
+tests/.hitch
Index: install_os_dependencies.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- install_os_dependencies.sh	(revision )
+++ install_os_dependencies.sh	(revision )
@@ -0,0 +1,82 @@
+#!/bin/bash
+
+OS_REQUIREMENTS_FILENAME="requirements.apt"
+
+# Handle call with wrong command
+function wrong_command()
+{
+  echo "${0##*/} - unknown command: '${1}'"
+  usage_message
+}
+
+# Print help / script usage
+function usage_message()
+{
+  echo "usage: ./${0##*/} <command>"
+  echo "available commands are:"
+  echo -e "\tlist\t\tPrint a list of all packages defined on ${OS_REQUIREMENTS_FILENAME} file"
+  echo -e "\thelp\t\tPrint this help"
+  echo -e "\n\tCommands that require superuser permission:"
+  echo -e "\tinstall\t\tInstall packages defined on ${OS_REQUIREMENTS_FILENAME} file. Note: This\n\t\t\t   does not upgrade the packages already installed for new\n\t\t\t   versions, even if new version is available in the repository."
+  echo -e "\tupgrade\t\tSame that install, but upgrate the already installed packages,\n\t\t\t   if new version is available."
+
+}
+
+# Read the requirements.apt file, and remove comments and blank lines
+function list_packages(){
+     grep -v "#" ${OS_REQUIREMENTS_FILENAME} | grep -v "^$";
+}
+
+function install()
+{
+    list_packages | xargs apt-get --no-upgrade install -y;
+}
+
+function upgrade()
+{
+    list_packages | xargs apt-get install -y;
+}
+
+
+function install_or_upgrade()
+{
+    P=${1}
+    PARAN=${P:-"install"}
+
+    if [[ $EUID -ne 0 ]]; then
+        echo -e "\nYou must run this with root privilege" 2>&1
+        echo -e "Please do:\n" 2>&1
+        echo "sudo ./${0##*/} $PARAN" 2>&1
+        echo -e "\n" 2>&1
+
+        exit 1
+    else
+
+        apt-get update
+
+        # Install the basic compilation dependencies and other required libraries of this project
+        if [ "$PARAN" == "install" ]; then
+            install;
+        else
+            upgrade;
+        fi
+
+        # cleaning downloaded packages from apt-get cache
+        apt-get clean
+
+        exit 0
+    fi
+
+
+}
+
+
+# Handle command argument
+case "$1" in
+    install) install_or_upgrade;;
+    upgrade) install_or_upgrade "upgrade";;
+    list) list_packages;;
+    help) usage_message;;
+    *) wrong_command $1;;
+esac
+
Index: config/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/urls.py	(revision )
+++ config/urls.py	(revision )
@@ -0,0 +1,148 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+# from django.conf import settings
+
+import re
+from django.conf.urls import patterns, include, url
+from django.conf.urls.i18n import i18n_patterns
+from django.conf.urls.static import static
+from django.contrib import admin
+
+from django.views.generic import TemplateView
+from django.views import defaults as default_views
+
+from zhiliao.core.views import direct_to_template
+from zhiliao.conf import settings
+
+
+admin.autodiscover()
+
+urlpatterns = [
+    url(r'^400/$', 'django.views.defaults.bad_request'),
+    url(r'^403/$', 'django.views.defaults.permission_denied'),
+    url(r'^404/$', 'django.views.defaults.page_not_found'),
+    url(r'^500/$', 'django.views.defaults.server_error'),
+]
+
+if settings.DEBUG:
+    try:
+        import debug_toolbar
+    except ImportError:
+        pass
+    else:
+        urlpatterns += patterns('',
+            url(r'^__debug__/', include(debug_toolbar.urls)),
+        )
+
+urlpatterns += [
+    url(r'^admin/', include(admin.site.urls)),
+]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+
+#
+# urlpatterns += i18n_patterns("",
+#     # Change the admin prefix here to use an alternate URL for the
+#     # admin interface, which would be marginally more secure.
+#     ("^admin/", include(admin.site.urls)),
+# )
+
+if settings.USE_MODELTRANSLATION:
+    urlpatterns += patterns('',
+        url('^i18n/$', 'django.views.i18n.set_language', name='set_language'),
+    )
+
+
+urlpatterns += [
+    # url(r'^$', TemplateView.as_view(template_name='pages/home.html'), name="home"),
+    url(r'^about/$', TemplateView.as_view(template_name='pages/about.html'), name="about"),
+
+
+    # url(settings.ADMIN_URL, include(admin.site.urls)),
+
+    # User management
+    # url(r'^users/', include("zhiliao.users.urls", namespace="users")),
+
+
+    # Your stuff: custom urls includes go here
+
+
+]
+
+urlpatterns += patterns('',
+    # We don't want to presume how your homepage works, so here are a
+    # few patterns you can use to set it up.
+
+    # HOMEPAGE AS STATIC TEMPLATE
+    # ---------------------------
+    # This pattern simply loads the index.html template. It isn't
+    # commented out like the others, so it's the default. You only need
+    # one homepage pattern, so if you use a different one, comment this
+    # one out.
+
+    url("^$", direct_to_template, {"template": "index.html"}, name="home"),
+
+    # HOMEPAGE AS AN EDITABLE PAGE IN THE PAGE TREE
+    # ---------------------------------------------
+    # This pattern gives us a normal ``Page`` object, so that your
+    # homepage can be managed via the page tree in the admin. If you
+    # use this pattern, you'll need to create a page in the page tree,
+    # and specify its URL (in the Meta Data section) as "/", which
+    # is the value used below in the ``{"slug": "/"}`` part.
+    # Also note that the normal rule of adding a custom
+    # template per page with the template name using the page's slug
+    # doesn't apply here, since we can't have a template called
+    # "/.html" - so for this case, the template "pages/index.html"
+    # should be used if you want to customize the homepage's template.
+
+    # url("^$", "zhiliao.pages.views.page", {"slug": "/"}, name="home"),
+
+    # HOMEPAGE FOR A BLOG-ONLY SITE
+    # -----------------------------
+    # This pattern points the homepage to the blog post listing page,
+    # and is useful for sites that are primarily blogs. If you use this
+    # pattern, you'll also need to set BLOG_SLUG = "" in your
+    # ``settings.py`` module, and delete the blog page object from the
+    # page tree in the admin if it was installed.
+
+    # url("^$", "zhiliao.blog.views.blog_post_list", name="home"),
+
+    # MEZZANINE'S URLS
+    # ----------------
+    # [ADD YOUR OWN URLPATTERNS *ABOVE* THE LINE BELOW.]
+    # ``zhiliao.urls`` INCLUDES A *CATCH ALL* PATTERN
+    # FOR PAGES, SO URLPATTERNS ADDED BELOW ``zhiliao.urls``
+    # WILL NEVER BE MATCHED!
+
+    # If you'd like more granular control over the patterns in
+    # ``zhiliao.urls``, go right ahead and take the parts you want
+    # from it, and use them directly below instead of using
+    # ``zhiliao.urls``.
+    ("^", include("zhiliao.urls")),
+
+    # MOUNTING MEZZANINE UNDER A PREFIX
+    # ---------------------------------
+    # You can also mount all of Mezzanine's urlpatterns under a
+    # URL prefix if desired. When doing this, you need to define the
+    # ``SITE_PREFIX`` setting, which will contain the prefix. Eg:
+    # SITE_PREFIX = "my/site/prefix"
+    # For convenience, and to avoid repeating the prefix, use the
+    # commented out pattern below (commenting out the one above of course)
+    # which will make use of the ``SITE_PREFIX`` setting. Make sure to
+    # add the import ``from django.conf import settings`` to the top
+    # of this file as well.
+    # Note that for any of the various homepage patterns above, you'll
+    # need to use the ``SITE_PREFIX`` setting as well.
+
+    # ("^%s/" % settings.SITE_PREFIX, include("zhiliao.urls"))
+
+)
+
+# Adds ``STATIC_URL`` to the context of error pages, so that error
+# pages can use JS, CSS and images.
+handler404 = "zhiliao.core.views.page_not_found"
+handler500 = "zhiliao.core.views.server_error"
+
+
+
+
+
Index: zhiliao/users/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/admin.py	(revision )
+++ zhiliao/users/admin.py	(revision )
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import, unicode_literals
+
+from django import forms
+from django.contrib import admin
+from django.contrib.auth.admin import UserAdmin as AuthUserAdmin
+from django.contrib.auth.forms import UserChangeForm, UserCreationForm
+
+from .models import User
+
+
+class MyUserChangeForm(UserChangeForm):
+    class Meta(UserChangeForm.Meta):
+        model = User
+
+
+class MyUserCreationForm(UserCreationForm):
+
+    error_message = UserCreationForm.error_messages.update({
+        'duplicate_username': 'This username has already been taken.'
+    })
+
+    class Meta(UserCreationForm.Meta):
+        model = User
+
+    def clean_username(self):
+        username = self.cleaned_data["username"]
+        try:
+            User.objects.get(username=username)
+        except User.DoesNotExist:
+            return username
+        raise forms.ValidationError(self.error_messages['duplicate_username'])
+
+
+@admin.register(User)
+class UserAdmin(AuthUserAdmin):
+    form = MyUserChangeForm
+    add_form = MyUserCreationForm
Index: docs/docker_ec2.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/docker_ec2.rst	(revision )
+++ docs/docker_ec2.rst	(revision )
@@ -0,0 +1,186 @@
+Developing with Docker
+======================
+
+You can develop your application in a `Docker`_ container for simpler deployment onto bare Linux machines later. This instruction assumes an `Amazon Web Services`_ EC2 instance, but it should work on any machine with Docker > 1.3 and `Docker compose`_ installed.
+
+.. _Docker: https://www.docker.com/
+.. _Amazon Web Services: http://aws.amazon.com/
+.. _Docker compose: https://docs.docker.com/compose/
+
+Setting up
+^^^^^^^^^^
+
+Docker encourages running one container for each process. This might mean one container for your web server, one for Django application and a third for your database. Once you're happy composing containers in this way you can easily add more, such as a `Redis`_ cache.
+
+.. _Redis: http://redis.io/
+
+The Docker compose tool (previously known as `fig`_) makes linking these containers easy. An example set up for your cookiecutter-django project might look like this:
+
+.. _fig: http://www.fig.sh/
+
+::
+
+    webapp/ # Your cookiecutter project would be in here
+        Dockerfile
+        ...
+    database/
+        Dockerfile
+        ...
+    webserver/
+        Dockerfile
+        ...
+    docker-compose.yml
+
+Each component of your application would get its own `Dockerfile`_. The rest of this example assumes you are using the `base postgres image`_ for your database. Your database settings in `config/common.py` might then look something like:
+
+.. _Dockerfile: https://docs.docker.com/reference/builder/
+.. _base postgres image: https://registry.hub.docker.com/_/postgres/
+
+.. code-block:: python
+
+    DATABASES = {
+            'default': {
+                'ENGINE': 'django.db.backends.postgresql_psycopg2',
+                'NAME': 'postgres',
+                'USER': 'postgres',
+                'HOST': 'database',
+                'PORT': 5432,
+            }
+        }
+
+The `Docker compose documentation`_ explains in detail what you can accomplish in the `docker-compose.yml` file, but an example configuration might look like this:
+
+.. _Docker compose documentation: https://docs.docker.com/compose/#compose-documentation
+
+.. code-block:: yaml
+
+    database:
+        build: database
+    webapp:
+        build: webapp:
+        command: /usr/bin/python3.4 manage.py runserver 0.0.0.0:8000 # dev setting
+        # command: gunicorn -b 0.0.0.0:8000 wsgi:application # production setting
+        volumes:
+            - webapp/your_project_name:/path/to/container/workdir/
+        links:
+            - database
+    webserver:
+        build: webserver
+        ports:
+            - "80:80"
+            - "443:443"
+        links:
+            - webapp
+
+We'll ignore the webserver for now (you'll want to comment that part out while we do). A working Dockerfile to run your cookiecutter application might look like this:
+
+::
+
+    FROM ubuntu:14.04
+    ENV REFRESHED_AT 2015-01-13
+
+    # update packages and prepare to build software
+    RUN ["apt-get", "update"]
+    RUN ["apt-get", "-y", "install", "build-essential", "vim", "git", "curl"]
+    RUN ["locale-gen", "en_GB.UTF-8"]
+
+    # install latest python
+    RUN ["apt-get", "-y", "build-dep", "python3-dev", "python3-imaging"]
+    RUN ["apt-get", "-y", "install", "python3-dev", "python3-imaging", "python3-pip"]
+
+    # prepare postgreSQL support
+    RUN ["apt-get", "-y", "build-dep", "python3-psycopg2"]
+
+    # move into our working directory
+    # ADD must be after chown see http://stackoverflow.com/a/26145444/1281947
+    RUN ["groupadd", "python"]
+    RUN ["useradd", "python", "-s", "/bin/bash", "-m", "-g", "python", "-G", "python"]
+    ENV HOME /home/python
+    WORKDIR /home/python
+    RUN ["chown", "-R", "python:python", "/home/python"]
+    ADD ./ /home/python
+
+    # manage requirements
+    ENV REQUIREMENTS_REFRESHED_AT 2015-02-25
+    RUN ["pip3", "install", "-r", "requirements.txt"]
+
+    # uncomment the line below to use container as a non-root user
+    USER python:python
+
+Running `sudo docker-compose build` will follow the instructions in your `docker-compose.yml` file and build the database container, then your webapp, before mounting your cookiecutter project files as a volume in the webapp container and linking to the database. Our example yaml file runs in development mode but changing it to production mode is as simple as commenting out the line using `runserver` and uncommenting the line using `gunicorn`.
+
+Both are set to run on port `0.0.0.0:8000`, which is where the Docker daemon will discover it. You can now run `sudo docker-compose up` and browse to `localhost:8000` to see your application running.
+
+Deployment
+^^^^^^^^^^
+
+You'll need a webserver container for deployment. An example setup for `Nginx`_ might look like this:
+
+.. _Nginx: http://wiki.nginx.org/Main
+
+::
+
+    FROM ubuntu:14.04
+    ENV REFRESHED_AT 2015-02-11
+
+    # get the nginx package and set it up
+    RUN ["apt-get", "update"]
+    RUN ["apt-get", "-y", "install", "nginx"]
+
+    # forward request and error logs to docker log collector
+    RUN ln -sf /dev/stdout /var/log/nginx/access.log
+    RUN ln -sf /dev/stderr /var/log/nginx/error.log
+    VOLUME ["/var/cache/nginx"]
+    EXPOSE 80 443
+
+    # load nginx conf
+    ADD ./site.conf /etc/nginx/sites-available/your_cookiecutter_project
+    RUN ["ln", "-s", "/etc/nginx/sites-available/your_cookiecutter_project", "/etc/nginx/sites-enabled/your_cookiecutter_project"]
+    RUN ["rm", "-rf", "/etc/nginx/sites-available/default"]
+
+    #start the server
+    CMD ["nginx", "-g", "daemon off;"]
+
+That Dockerfile assumes you have an Nginx conf file named `site.conf` in the same directory as the webserver Dockerfile. A very basic example, which forwards traffic onto the development server or gunicorn for processing, would look like this:
+
+::
+
+    # see http://serverfault.com/questions/577370/how-can-i-use-environment-variables-in-nginx-conf#comment730384_577370
+    upstream localhost {
+        server webapp_1:8000;
+    }
+    server {
+        location / {
+            proxy_pass http://localhost;
+        }
+    }
+
+Running `sudo docker-compose build webserver` will build your server container. Running `sudo docker-compose up` will now expose your application directly on `localhost` (no need to specify the port number).
+
+Building and running your app on EC2
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+All you now need to do to run your app in production is:
+
+* Create an empty EC2 Linux instance (any Linux machine should do).
+
+* Install your preferred source control solution, Docker and Docker compose on the news instance.
+
+* Pull in your code from source control. The root directory should be the one with your `docker-compose.yml` file in it.
+
+* Run `sudo docker-compose build` and `sudo docker-compose up`.
+
+* Assign an `Elastic IP address`_ to your new machine.
+
+.. _Elastic IP address: https://aws.amazon.com/articles/1346
+
+* Point your domain name to the elastic IP.
+
+**Be careful with Elastic IPs** because, on the AWS free tier, if you assign one and then stop the machine you will incur charges while the machine is down (presumably because you're preventing them allocating the IP to someone else).
+
+Security advisory
+^^^^^^^^^^^^^^^^^
+
+The setup described in this instruction will get you up-and-running but it hasn't been audited for security. If you are running your own setup like this it is always advisable to, at a minimum, examine your application with a tool like `OWASP ZAP`_ to see what security holes you might be leaving open.
+
+.. _OWASP ZAP: https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project
Index: zhiliao/static/css/project.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/static/css/project.css	(revision )
+++ zhiliao/static/css/project.css	(revision )
@@ -0,0 +1,38 @@
+/* These styles are generated from project.scss. */
+
+.alert-debug {
+  color: black;
+  background-color: white;
+  border-color: #d6e9c6;
+}
+
+.alert-error {
+  color: #b94a48;
+  background-color: #f2dede;
+  border-color: #eed3d7;
+}
+
+/* This is a fix for the bootstrap4 alpha release */
+@media (max-width: 47.9em) {
+  .navbar-nav .nav-item {
+    float: none;
+    width: 100%;
+    display: inline-block;
+  }
+
+  .navbar-nav .nav-item + .nav-item {
+    margin-left: 0;
+  }
+
+  .nav.navbar-nav.pull-right {
+    float: none !important;
+  }
+}
+
+/* Display django-debug-toolbar.
+   See https://github.com/django-debug-toolbar/django-debug-toolbar/issues/742
+   and https://github.com/pydanny/cookiecutter-django/issues/317
+*/
+[hidden][style="display: block;"] {
+  display: block !important;
+}
\ No newline at end of file
Index: manage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- manage.py	(revision )
+++ manage.py	(revision )
@@ -0,0 +1,10 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local")
+
+    from django.core.management import execute_from_command_line
+
+    execute_from_command_line(sys.argv)
Index: .coveragerc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .coveragerc	(revision )
+++ .coveragerc	(revision )
@@ -0,0 +1,3 @@
+[run]
+include = zhiliao/*
+omit = *migrations*, *tests*
Index: compose/django/gunicorn.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- compose/django/gunicorn.sh	(revision )
+++ compose/django/gunicorn.sh	(revision )
@@ -0,0 +1,3 @@
+#!/bin/sh
+python /app/manage.py collectstatic --noinput
+/usr/local/bin/gunicorn config.wsgi -w 4 -b 0.0.0.0:5000 --chdir=/app
\ No newline at end of file
Index: docs/make.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/make.bat	(revision )
+++ docs/make.bat	(revision )
@@ -0,0 +1,190 @@
+@ECHO OFF
+
+REM Command file for Sphinx documentation
+
+if "%SPHINXBUILD%" == "" (
+	set SPHINXBUILD=sphinx-build
+)
+set BUILDDIR=_build
+set ALLSPHINXOPTS=-d %BUILDDIR%/doctrees %SPHINXOPTS% .
+set I18NSPHINXOPTS=%SPHINXOPTS% .
+if NOT "%PAPER%" == "" (
+	set ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%
+	set I18NSPHINXOPTS=-D latex_paper_size=%PAPER% %I18NSPHINXOPTS%
+)
+
+if "%1" == "" goto help
+
+if "%1" == "help" (
+	:help
+	echo.Please use `make ^<target^>` where ^<target^> is one of
+	echo.  html       to make standalone HTML files
+	echo.  dirhtml    to make HTML files named index.html in directories
+	echo.  singlehtml to make a single large HTML file
+	echo.  pickle     to make pickle files
+	echo.  json       to make JSON files
+	echo.  htmlhelp   to make HTML files and a HTML help project
+	echo.  qthelp     to make HTML files and a qthelp project
+	echo.  devhelp    to make HTML files and a Devhelp project
+	echo.  epub       to make an epub
+	echo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter
+	echo.  text       to make text files
+	echo.  man        to make manual pages
+	echo.  texinfo    to make Texinfo files
+	echo.  gettext    to make PO message catalogs
+	echo.  changes    to make an overview over all changed/added/deprecated items
+	echo.  linkcheck  to check all external links for integrity
+	echo.  doctest    to run all doctests embedded in the documentation if enabled
+	goto end
+)
+
+if "%1" == "clean" (
+	for /d %%i in (%BUILDDIR%\*) do rmdir /q /s %%i
+	del /q /s %BUILDDIR%\*
+	goto end
+)
+
+if "%1" == "html" (
+	%SPHINXBUILD% -b html %ALLSPHINXOPTS% %BUILDDIR%/html
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The HTML pages are in %BUILDDIR%/html.
+	goto end
+)
+
+if "%1" == "dirhtml" (
+	%SPHINXBUILD% -b dirhtml %ALLSPHINXOPTS% %BUILDDIR%/dirhtml
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The HTML pages are in %BUILDDIR%/dirhtml.
+	goto end
+)
+
+if "%1" == "singlehtml" (
+	%SPHINXBUILD% -b singlehtml %ALLSPHINXOPTS% %BUILDDIR%/singlehtml
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The HTML pages are in %BUILDDIR%/singlehtml.
+	goto end
+)
+
+if "%1" == "pickle" (
+	%SPHINXBUILD% -b pickle %ALLSPHINXOPTS% %BUILDDIR%/pickle
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished; now you can process the pickle files.
+	goto end
+)
+
+if "%1" == "json" (
+	%SPHINXBUILD% -b json %ALLSPHINXOPTS% %BUILDDIR%/json
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished; now you can process the JSON files.
+	goto end
+)
+
+if "%1" == "htmlhelp" (
+	%SPHINXBUILD% -b htmlhelp %ALLSPHINXOPTS% %BUILDDIR%/htmlhelp
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished; now you can run HTML Help Workshop with the ^
+.hhp project file in %BUILDDIR%/htmlhelp.
+	goto end
+)
+
+if "%1" == "qthelp" (
+	%SPHINXBUILD% -b qthelp %ALLSPHINXOPTS% %BUILDDIR%/qthelp
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished; now you can run "qcollectiongenerator" with the ^
+.qhcp project file in %BUILDDIR%/qthelp, like this:
+	echo.^> qcollectiongenerator %BUILDDIR%\qthelp\zhiliao.qhcp
+	echo.To view the help file:
+	echo.^> assistant -collectionFile %BUILDDIR%\qthelp\zhiliao.ghc
+	goto end
+)
+
+if "%1" == "devhelp" (
+	%SPHINXBUILD% -b devhelp %ALLSPHINXOPTS% %BUILDDIR%/devhelp
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished.
+	goto end
+)
+
+if "%1" == "epub" (
+	%SPHINXBUILD% -b epub %ALLSPHINXOPTS% %BUILDDIR%/epub
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The epub file is in %BUILDDIR%/epub.
+	goto end
+)
+
+if "%1" == "latex" (
+	%SPHINXBUILD% -b latex %ALLSPHINXOPTS% %BUILDDIR%/latex
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished; the LaTeX files are in %BUILDDIR%/latex.
+	goto end
+)
+
+if "%1" == "text" (
+	%SPHINXBUILD% -b text %ALLSPHINXOPTS% %BUILDDIR%/text
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The text files are in %BUILDDIR%/text.
+	goto end
+)
+
+if "%1" == "man" (
+	%SPHINXBUILD% -b man %ALLSPHINXOPTS% %BUILDDIR%/man
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The manual pages are in %BUILDDIR%/man.
+	goto end
+)
+
+if "%1" == "texinfo" (
+	%SPHINXBUILD% -b texinfo %ALLSPHINXOPTS% %BUILDDIR%/texinfo
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The Texinfo files are in %BUILDDIR%/texinfo.
+	goto end
+)
+
+if "%1" == "gettext" (
+	%SPHINXBUILD% -b gettext %I18NSPHINXOPTS% %BUILDDIR%/locale
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Build finished. The message catalogs are in %BUILDDIR%/locale.
+	goto end
+)
+
+if "%1" == "changes" (
+	%SPHINXBUILD% -b changes %ALLSPHINXOPTS% %BUILDDIR%/changes
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.The overview file is in %BUILDDIR%/changes.
+	goto end
+)
+
+if "%1" == "linkcheck" (
+	%SPHINXBUILD% -b linkcheck %ALLSPHINXOPTS% %BUILDDIR%/linkcheck
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Link check complete; look for any errors in the above output ^
+or in %BUILDDIR%/linkcheck/output.txt.
+	goto end
+)
+
+if "%1" == "doctest" (
+	%SPHINXBUILD% -b doctest %ALLSPHINXOPTS% %BUILDDIR%/doctest
+	if errorlevel 1 exit /b 1
+	echo.
+	echo.Testing of doctests in the sources finished, look at the ^
+results in %BUILDDIR%/doctest/output.txt.
+	goto end
+)
+
+:end
Index: dev.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dev.yml	(revision )
+++ dev.yml	(revision )
@@ -0,0 +1,17 @@
+postgres:
+  image: postgres
+  volumes:
+    # If you are using boot2docker, postgres data has to live in the VM for now until #581 is fixed
+    # for more info see here: https://github.com/boot2docker/boot2docker/issues/581
+    - /data/dev/zhiliao/postgres:/var/lib/postgresql/data
+
+django:
+  dockerfile: Dockerfile-dev
+  build: .
+  command: python /app/manage.py runserver_plus 0.0.0.0:8000
+  volumes:
+    - .:/app
+  ports:
+    - "8000:8000"
+  links:
+    - postgres
Index: zhiliao/static/js/project.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/static/js/project.js	(revision )
+++ zhiliao/static/js/project.js	(revision )
@@ -0,0 +1,1 @@
+/* Project specific Javascript goes here. */
Index: env.example
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- env.example	(revision )
+++ env.example	(revision )
@@ -0,0 +1,18 @@
+POSTGRES_PASSWORD=mysecretpass
+POSTGRES_USER=postgresuser
+
+DJANGO_ADMIN_URL=
+DJANGO_SETTINGS_MODULE=config.settings.production
+DJANGO_SECRET_KEY=d^ww18*bog*%x0*!)2rw8h#sc-jrkfdjx^@fi5-syf26xvtlr0
+DJANGO_ALLOWED_HOSTS=.zhiliao.zhi12.net
+DJANGO_AWS_ACCESS_KEY_ID=
+DJANGO_AWS_SECRET_ACCESS_KEY=
+DJANGO_AWS_STORAGE_BUCKET_NAME=
+DJANGO_MAILGUN_API_KEY=
+DJANGO_MAILGUN_SERVER_NAME=
+DJANGO_SERVER_EMAIL=
+DJANGO_SECURE_SSL_REDIRECT=False
+DJANGO_SENTRY_DSN=
+
+NEW_RELIC_LICENSE_KEY
+
Index: .travis.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .travis.yml	(revision )
+++ .travis.yml	(revision )
@@ -0,0 +1,18 @@
+sudo: true
+before_install:
+  - sudo apt-get update -qq
+  - sudo apt-get install -qq build-essential gettext python-dev zlib1g-dev libpq-dev xvfb
+  - sudo apt-get install -qq libtiff4-dev libjpeg8-dev libfreetype6-dev liblcms1-dev libwebp-dev
+  - sudo apt-get install -qq graphviz-dev python-setuptools python3-dev python-virtualenv python-pip
+  - sudo apt-get install -qq firefox automake libtool libreadline6 libreadline6-dev libreadline-dev
+  - sudo apt-get install -qq libsqlite3-dev libxml2 libxml2-dev libssl-dev libbz2-dev wget curl llvm
+language: python
+python:
+
+  - "2.7"
+install:
+  - "pip install hitch"
+  - "cd tests"
+  - "hitch init"
+script:
+  - "hitch test . --extra '{\"xvfb\":true, \"pause_on_failure\":false}'"
Index: tests/hitchreqs.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/hitchreqs.txt	(revision )
+++ tests/hitchreqs.txt	(revision )
@@ -0,0 +1,39 @@
+click==5.1
+colorama==0.3.3
+decorator==4.0.4
+docopt==0.6.2
+faketime==0.9.6.3
+hitchcron==0.2
+hitchpostgres==0.6.7
+hitchpython==0.5.0
+hitchredis==0.4.5
+hitchselenium==0.4.8
+hitchserve==0.4.5
+hitchsmtp==0.2.1
+hitchsystem==0.1.1
+hitchtest==0.9.2
+humanize==0.5.1
+ipython==4.0.0
+ipython-genutils==0.1.0
+Jinja2==2.8
+MarkupSafe==0.23
+path.py==8.1.2
+patool==1.8
+pexpect==4.0.1
+pickleshare==0.5
+psutil==3.2.2
+ptyprocess==0.5
+pykwalify==1.5.0
+python-build==0.2.5
+python-dateutil==2.4.2
+pyuv==1.2.0
+PyYAML==3.11
+requests==2.8.1
+selenium==2.48.0
+simplegeneric==0.8.1
+six==1.10.0
+tblib==1.1.0
+tornado==4.2.1
+traitlets==4.0.0
+unixpackage==0.3.7
+xeger==0.3
Index: tests/register-and-log-in.test
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/register-and-log-in.test	(revision )
+++ tests/register-and-log-in.test	(revision )
@@ -0,0 +1,19 @@
+- name: Sign up and log in
+  scenario:
+    - Load website
+    - Click: djHideToolBarButton
+    - Click: sign-up-link
+    - Fill form:
+        id_username: testuser
+        id_email: testuser@domain.com
+        id_password1: password
+        id_password2: password
+    - Click: sign-up-button
+    - Wait for email:
+        containing: Please Confirm Your E-mail Address
+    - Click on link in last email
+    - Click: confirm-button
+    - Fill form:
+        id_login: testuser
+        id_password: password
+    - Click: sign-in-button
Index: zhiliao/users/tests/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/tests/__init__.py	(revision )
+++ zhiliao/users/tests/__init__.py	(revision )
@@ -0,0 +1,1 @@
+
\ No newline at end of file
Index: config/settings/mysqlconf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/settings/mysqlconf.py	(revision )
+++ config/settings/mysqlconf.py	(revision )
@@ -0,0 +1,23 @@
+
+# DATABASE CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#databases
+# DATABASES = {
+#     # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
+#     'default': env.db("DATABASE_URL", default="postgres:///zhiliao"),
+# }
+DATABASES = {
+    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
+    'default': {
+        'ENGINE': 'django.db.backends.mysql',
+        'NAME': 'zhiliao',
+        'USER': 'ygs',
+        'PASSWORD': '0000',
+        'HOST': '',
+        'PORT': '3306',
+        # 'OPTIONS': {
+        #     'read_default_file': '/etc/my.cnf',
+        # },
+    },
+}
+DATABASES['default']['ATOMIC_REQUESTS'] = True
Index: .gitattributes
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitattributes	(revision )
+++ .gitattributes	(revision )
@@ -0,0 +1,1 @@
+* text=auto
Index: install_python_dependencies.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- install_python_dependencies.sh	(revision )
+++ install_python_dependencies.sh	(revision )
@@ -0,0 +1,37 @@
+#!/bin/bash
+
+pip --version >/dev/null 2>&1 || {
+    echo >&2 -e "\npip is required but it's not installed."
+    echo >&2 -e "You can install it by running the following command:\n"
+    echo >&2 "wget https://bootstrap.pypa.io/get-pip.py --output-document=get-pip.py; chmod +x get-pip.py; sudo -H python3 get-pip.py"
+    echo >&2 -e "\n"
+    echo >&2 -e "\nFor more information, see pip documentation: https://pip.pypa.io/en/latest/"
+    exit 1;
+}
+
+virtualenv --version >/dev/null 2>&1 || {
+    echo >&2 -e "\nvirtualenv is required but it's not installed."
+    echo >&2 -e "You can install it by running the following command:\n"
+    echo >&2 "sudo -H pip3 install virtualenv"
+    echo >&2 -e "\n"
+    echo >&2 -e "\nFor more information, see virtualenv documentation: https://virtualenv.pypa.io/en/latest/"
+    exit 1;
+}
+
+if [ -z "$VIRTUAL_ENV" ]; then
+    echo >&2 -e "\nYou need activate a virtualenv first"
+    echo >&2 -e 'If you do not have a virtualenv created, run the following command to create and automatically activate a new virtualenv named "venv" on current folder:\n'
+    echo >&2 -e "virtualenv venv --python=\`which python3\`"
+    echo >&2 -e "\nTo leave/disable the currently active virtualenv, run the following command:\n"
+    echo >&2  "deactivate"
+    echo >&2 -e "\nTo activate the virtualenv again, run the following command:\n"
+    echo >&2  "source venv/bin/activate"
+    echo >&2 -e "\nFor more information, see virtualenv documentation: https://virtualenv.pypa.io/en/latest/"
+    echo >&2 -e "\n"
+    exit 1;
+else
+
+    pip install -r requirements/local.txt
+    pip install -r requirements/test.txt
+    pip install -r requirements.txt
+fi
Index: Procfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Procfile	(revision )
+++ Procfile	(revision )
@@ -0,0 +1,1 @@
+web: gunicorn config.wsgi:application
Index: compose/django/entrypoint.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- compose/django/entrypoint.sh	(revision )
+++ compose/django/entrypoint.sh	(revision )
@@ -0,0 +1,18 @@
+#!/bin/bash
+set -e
+# This entrypoint is used to play nicely with the current cookiecutter configuration.
+# Since docker-compose relies heavily on environment variables itself for configuration, we'd have to define multiple
+# environment variables just to support cookiecutter out of the box. That makes no sense, so this little entrypoint
+# does all this for us.
+export REDIS_URL=redis://redis:6379/0
+
+# the official postgres image uses 'postgres' as default user if not set explictly.
+if [ -z "$POSTGRES_ENV_POSTGRES_USER" ]; then
+    export POSTGRES_ENV_POSTGRES_USER=postgres
+fi 
+
+export DATABASE_URL=postgres://$POSTGRES_ENV_POSTGRES_USER:$POSTGRES_ENV_POSTGRES_PASSWORD@postgres:5432/$POSTGRES_ENV_POSTGRES_USER
+
+export CELERY_BROKER_URL=$REDIS_URL
+
+exec "$@"
\ No newline at end of file
Index: zhiliao/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/__init__.py	(revision )
+++ zhiliao/__init__.py	(revision )
@@ -0,0 +1,3 @@
+# -*- coding: utf-8 -*-
+__version__ = '0.1.0'
+__version_info__ = tuple([int(num) if num.isdigit() else num for num in __version__.replace('-', '.', 1).split('.')])
Index: zhiliao/users/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/__init__.py	(revision )
+++ zhiliao/users/__init__.py	(revision )
@@ -0,0 +1,1 @@
+# -*- coding: utf-8 -*-
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Dockerfile	(revision )
+++ Dockerfile	(revision )
@@ -0,0 +1,22 @@
+
+FROM python:2.7
+ENV PYTHONUNBUFFERED 1
+
+# Requirements have to be pulled and installed here, otherwise caching won't work
+COPY ./requirements /requirements
+
+RUN pip install -r /requirements/production.txt
+
+RUN groupadd -r django && useradd -r -g django django
+COPY . /app
+RUN chown -R django /app
+
+COPY ./compose/django/gunicorn.sh /gunicorn.sh
+COPY ./compose/django/entrypoint.sh /entrypoint.sh
+
+RUN chmod +x /entrypoint.sh && chown django /entrypoint.sh
+RUN chmod +x /gunicorn.sh && chown django /gunicorn.sh
+
+WORKDIR /app
+
+ENTRYPOINT ["/entrypoint.sh"]
Index: setup.cfg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup.cfg	(revision )
+++ setup.cfg	(revision )
@@ -0,0 +1,7 @@
+[flake8]
+max-line-length = 120
+exclude = .tox,.git,*/migrations/*,*/static/CACHE/*,docs,node_modules
+
+[pep8]
+max-line-length = 120
+exclude=.tox,.git,*/migrations/*,*/static/CACHE/*,docs,node_modules
Index: CONTRIBUTORS.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CONTRIBUTORS.txt	(revision )
+++ CONTRIBUTORS.txt	(revision )
@@ -0,0 +1,1 @@
+gladgod
Index: tests/all.settings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/all.settings	(revision )
+++ tests/all.settings	(revision )
@@ -0,0 +1,21 @@
+# Global settings for your hitch tests
+
+failfast: true
+xvfb: false
+pause_on_success: false
+pause_on_failure: false
+startup_timeout: 45
+shutdown_timeout: 5
+environment_variables:
+  DATABASE_URL: postgres://zhiliao:password@127.0.0.1:15432/zhiliao
+  SECRET_KEY: cj5^uos4tfCdfghjkf5hq$9$(@-79^e9&x$3vyf#igvsfm4d=+
+  CELERY_BROKER_URL: redis://localhost:16379
+  DJANGO_EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
+window_size:
+  width: 1024
+  height: 768
+python_version: 2.7.10
+environment:
+  - approved_platforms:
+    - linux
+    - darwin
Index: zhiliao/contrib/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/contrib/__init__.py	(revision )
+++ zhiliao/contrib/__init__.py	(revision )
@@ -0,0 +1,1 @@
+# -*- coding: utf-8 -*-
Index: requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements.txt	(revision )
+++ requirements.txt	(revision )
@@ -0,0 +1,3 @@
+# This file is here because many Platforms as a Service look for
+#	requirements.txt in the root directory of a project.
+-r requirements/production.txt
Index: zhiliao/users/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/urls.py	(revision )
+++ zhiliao/users/urls.py	(revision )
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import, unicode_literals
+
+from django.conf.urls import url
+
+from . import views
+
+urlpatterns = [
+    # URL pattern for the UserListView
+    url(
+        regex=r'^$',
+        view=views.UserListView.as_view(),
+        name='list'
+    ),
+
+    # URL pattern for the UserRedirectView
+    url(
+        regex=r'^~redirect/$',
+        view=views.UserRedirectView.as_view(),
+        name='redirect'
+    ),
+
+    # URL pattern for the UserDetailView
+    url(
+        regex=r'^(?P<username>[\w.@+-]+)/$',
+        view=views.UserDetailView.as_view(),
+        name='detail'
+    ),
+
+    # URL pattern for the UserUpdateView
+    url(
+        regex=r'^~update/$',
+        view=views.UserUpdateView.as_view(),
+        name='update'
+    ),
+]
Index: tests/base.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/base.yml	(revision )
+++ tests/base.yml	(revision )
@@ -0,0 +1,4 @@
+{% for python_version in python_versions %}
+{% block test scoped %}
+{% endblock %}
+{% endfor %}
Index: config/settings/mezzaconf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/settings/mezzaconf.py	(revision )
+++ config/settings/mezzaconf.py	(revision )
@@ -0,0 +1,87 @@
+
+from __future__ import absolute_import, unicode_literals
+import os
+from django.utils.translation import ugettext_lazy as _
+
+
+######################
+# MEZZANINE SETTINGS #
+######################
+
+# The following settings are already defined with default values in
+# the ``defaults.py`` module within each of Mezzanine's apps, but are
+# common enough to be put here, commented out, for conveniently
+# overriding. Please consult the settings documentation for a full list
+# of settings Mezzanine implements:
+# http://mezzanine.jupo.org/docs/configuration.html#default-settings
+
+# Controls the ordering and grouping of the admin menu.
+#
+# ADMIN_MENU_ORDER = (
+#     ("Content", ("pages.Page", "blog.BlogPost",
+#        "generic.ThreadedComment", (_("Media Library"), "fb_browse"),)),
+#     ("Site", ("sites.Site", "redirects.Redirect", "conf.Setting")),
+#     ("Users", ("auth.User", "auth.Group",)),
+# )
+
+# A three item sequence, each containing a sequence of template tags
+# used to render the admin dashboard.
+#
+# DASHBOARD_TAGS = (
+#     ("blog_tags.quick_blog", "mezzanine_tags.app_list"),
+#     ("comment_tags.recent_comments",),
+#     ("mezzanine_tags.recent_actions",),
+# )
+
+# A sequence of templates used by the ``page_menu`` template tag. Each
+# item in the sequence is a three item sequence, containing a unique ID
+# for the template, a label for the template, and the template path.
+# These templates are then available for selection when editing which
+# menus a page should appear in. Note that if a menu template is used
+# that doesn't appear in this setting, all pages will appear in it.
+
+# PAGE_MENU_TEMPLATES = (
+#     (1, _("Top navigation bar"), "pages/menus/dropdown.html"),
+#     (2, _("Left-hand tree"), "pages/menus/tree.html"),
+#     (3, _("Footer"), "pages/menus/footer.html"),
+# )
+
+# A sequence of fields that will be injected into Mezzanine's (or any
+# library's) models. Each item in the sequence is a four item sequence.
+# The first two items are the dotted path to the model and its field
+# name to be added, and the dotted path to the field class to use for
+# the field. The third and fourth items are a sequence of positional
+# args and a dictionary of keyword args, to use when creating the
+# field instance. When specifying the field class, the path
+# ``django.models.db.`` can be omitted for regular Django model fields.
+#
+# EXTRA_MODEL_FIELDS = (
+#     (
+#         # Dotted path to field.
+#         "mezzanine.blog.models.BlogPost.image",
+#         # Dotted path to field class.
+#         "somelib.fields.ImageField",
+#         # Positional args for field class.
+#         (_("Image"),),
+#         # Keyword args for field class.
+#         {"blank": True, "upload_to": "blog"},
+#     ),
+#     # Example of adding a field to *all* of Mezzanine's content types:
+#     (
+#         "mezzanine.pages.models.Page.another_field",
+#         "IntegerField", # 'django.db.models.' is implied if path is omitted.
+#         (_("Another name"),),
+#         {"blank": True, "default": 1},
+#     ),
+# )
+
+# Setting to turn on featured images for blog posts. Defaults to False.
+#
+# BLOG_USE_FEATURED_IMAGE = True
+
+# If True, the django-modeltranslation will be added to the
+# INSTALLED_APPS setting.
+USE_MODELTRANSLATION = False
+
+
+ACCOUNTS_PROFILE_FORM_EXCLUDE_FIELDS = ('first_name', 'last_name',)
Index: runtime.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- runtime.txt	(revision )
+++ runtime.txt	(revision )
@@ -0,0 +1,1 @@
+
Index: zhiliao/contrib/sites/migrations/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/contrib/sites/migrations/__init__.py	(revision )
+++ zhiliao/contrib/sites/migrations/__init__.py	(revision )
@@ -0,0 +1,1 @@
+# -*- coding: utf-8 -*-
Index: docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docker-compose.yml	(revision )
+++ docker-compose.yml	(revision )
@@ -0,0 +1,42 @@
+postgres:
+  image: postgres:9.4
+  volumes:
+    - /data/zhiliao/postgres:/var/lib/postgresql/data
+  env_file: .env
+
+django:
+  build: .
+  user: django
+  links:
+    - postgres
+    - redis
+  command: /gunicorn.sh
+  env_file: .env
+
+nginx:
+  build: ./compose/nginx
+  links:
+    - django
+  ports:
+    - "0.0.0.0:80:80"
+
+redis:
+  image: redis:3.0
+
+celeryworker:
+  build: .
+  user: django
+  env_file: .env
+  links:
+   - postgres
+   - redis
+  command: celery -A zhiliao.taskapp worker -l INFO
+
+celerybeat:
+  build: .
+  user: django
+  env_file: .env
+  links:
+    - postgres
+    - redis
+  command: celery -A zhiliao.taskapp beat -l INFO
Index: docs/deploy.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/deploy.rst	(revision )
+++ docs/deploy.rst	(revision )
@@ -0,0 +1,4 @@
+Deploy
+========
+
+This is where you describe how the project is deployed in production.
Index: zhiliao/users/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/views.py	(revision )
+++ zhiliao/users/views.py	(revision )
@@ -0,0 +1,48 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import, unicode_literals
+
+from django.core.urlresolvers import reverse
+from django.views.generic import DetailView, ListView, RedirectView, UpdateView
+
+from braces.views import LoginRequiredMixin
+
+from .models import User
+
+
+class UserDetailView(LoginRequiredMixin, DetailView):
+    model = User
+    # These next two lines tell the view to index lookups by username
+    slug_field = "username"
+    slug_url_kwarg = "username"
+
+
+class UserRedirectView(LoginRequiredMixin, RedirectView):
+    permanent = False
+
+    def get_redirect_url(self):
+        return reverse("users:detail",
+                       kwargs={"username": self.request.user.username})
+
+
+class UserUpdateView(LoginRequiredMixin, UpdateView):
+
+    fields = ['name', ]
+
+    # we already imported User in the view code above, remember?
+    model = User
+
+    # send the user back to their own page after a successful update
+    def get_success_url(self):
+        return reverse("users:detail",
+                       kwargs={"username": self.request.user.username})
+
+    def get_object(self):
+        # Only get the User record for the user making the request
+        return User.objects.get(username=self.request.user.username)
+
+
+class UserListView(LoginRequiredMixin, ListView):
+    model = User
+    # These next two lines tell the view to index lookups by username
+    slug_field = "username"
+    slug_url_kwarg = "username"
Index: config/settings/common.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/settings/common.py	(revision )
+++ config/settings/common.py	(revision )
@@ -0,0 +1,298 @@
+# -*- coding: utf-8 -*-
+"""
+Django settings for zhiliao project.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+from __future__ import absolute_import, unicode_literals
+
+import environ
+
+ROOT_DIR = environ.Path(__file__) - 3  # (/a/b/myfile.py - 3 = /)
+APPS_DIR = ROOT_DIR.path('zhiliao')
+
+env = environ.Env()
+
+
+# APP CONFIGURATION
+# ------------------------------------------------------------------------------
+DJANGO_APPS = (
+    # Admin
+    'django.contrib.admin',
+    # Default Django apps:
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.redirects',
+    'django.contrib.sessions',
+    'django.contrib.sites',
+    'django.contrib.sitemaps',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+
+    # Useful template tags:
+    'django.contrib.humanize',
+
+)
+THIRD_PARTY_APPS = (
+    'crispy_forms',  # Form layouts
+    'django_comments',
+    # "django_extensions",
+    # "compressor",
+)
+
+# Apps specific for this project go here.
+LOCAL_APPS = (
+    'zhiliao.users',  # custom users app
+
+    # Your stuff: custom apps go here
+
+    "zhiliao.boot",
+    "zhiliao.conf",
+
+    "zhiliao.core",
+
+    "zhiliao.generic",
+
+    "zhiliao.pages",
+    "zhiliao.blog",
+    "zhiliao.forms",
+    "zhiliao.galleries",
+    # "zhiliao.twitter",
+    "zhiliao.accounts",
+    # "zhiliao.mobile",
+
+
+    "zhiliao.grappellisafe",
+    "zhiliao.filebrowsersafe",
+)
+#
+PACKAGE_NAME_FILEBROWSER = "zhiliao.filebrowsersafe"
+PACKAGE_NAME_GRAPPELLI = "zhiliao.grappellisafe"
+
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#installed-apps
+INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
+
+
+# MIDDLEWARE CONFIGURATION
+# ------------------------------------------------------------------------------
+MIDDLEWARE_CLASSES = (
+    # Make sure djangosecure.middleware.SecurityMiddleware is listed first
+    'debug_toolbar.middleware.DebugToolbarMiddleware',
+    'zhiliao.core.middleware.UpdateCacheMiddleware',
+
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+
+    "zhiliao.core.request.CurrentRequestMiddleware",
+    "zhiliao.core.middleware.RedirectFallbackMiddleware",
+    "zhiliao.core.middleware.TemplateForDeviceMiddleware",
+    "zhiliao.core.middleware.TemplateForHostMiddleware",
+    "zhiliao.core.middleware.AdminLoginInterfaceSelectorMiddleware",
+    "zhiliao.core.middleware.SitePermissionMiddleware",
+    # Uncomment the following if using any of the SSL settings:
+    # "zhiliao.core.middleware.SSLRedirectMiddleware",
+    "zhiliao.pages.middleware.PageMiddleware",
+    "zhiliao.core.middleware.FetchFromCacheMiddleware",
+)
+
+# Store these package names here as they may change in the future since
+# at the moment we are using custom forks of them.
+
+# MIGRATIONS CONFIGURATION
+# ------------------------------------------------------------------------------
+MIGRATION_MODULES = {
+    'sites': 'zhiliao.contrib.sites.migrations'
+}
+
+# DEBUG = env.bool('DJANGO_DEBUG', default=True)
+
+# FIXTURE CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-FIXTURE_DIRS
+FIXTURE_DIRS = (
+    str(APPS_DIR.path('fixtures')),
+)
+
+# EMAIL CONFIGURATION
+# ------------------------------------------------------------------------------
+EMAIL_BACKEND = env('DJANGO_EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
+
+# MANAGER CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#admins
+ADMINS = (
+    ("""gladgod""", 'gladgod@aliyun.com'),
+)
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#managers
+MANAGERS = ADMINS
+
+
+
+# GENERAL CONFIGURATION
+# ------------------------------------------------------------------------------
+# Local time zone for this installation. Choices can be found here:
+# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
+# although not all choices may be available on all operating systems.
+# In a Windows environment this must be set to your system time zone.
+TIME_ZONE = 'Asia/Shanghai'
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#language-code
+
+LANGUAGE_CODE = 'zh-hans'
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#site-id
+SITE_ID = 1
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n
+USE_I18N = True
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n
+USE_L10N = True
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#use-tz
+USE_TZ = True
+
+
+# TEMPLATE CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#templates
+TEMPLATES = [
+    {
+        # See: https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs
+        'DIRS': [
+            str(ROOT_DIR.path('templates')),
+            # '/home/ygs/PycharmProjects/zhiliao/zhiliao/pages/templates',
+            # '/home/ygs/PycharmProjects/zhiliao/zhiliao/core/templates',
+            # '/home/ygs/PycharmProjects/zhiliao/zhiliao/generic/templates',
+            # str(ROOT_DIR.path('templates')),
+        ],
+        # 'APP_DIRS': True,
+        'OPTIONS': {
+            # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-debug
+            'debug': True,
+            # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-loaders
+            # https://docs.djangoproject.com/en/dev/ref/templates/api/#loader-types
+            'loaders': [
+                'django.template.loaders.filesystem.Loader',
+                'django.template.loaders.app_directories.Loader',
+            ],
+            # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-context-processors
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+
+                'django.template.context_processors.i18n',
+                'django.template.context_processors.media',
+
+                'django.template.context_processors.static',
+                'django.template.context_processors.tz',
+                'django.contrib.messages.context_processors.messages',
+
+                # Your stuff: custom template context processors go here
+                "zhiliao.conf.context_processors.settings",
+                "zhiliao.pages.context_processors.page",
+            ],
+        },
+    },
+]
+
+# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'
+# DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
+
+# See: http://django-crispy-forms.readthedocs.org/en/latest/install.html#template-packs
+CRISPY_TEMPLATE_PACK = 'bootstrap3'
+
+# STATIC FILE CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-root
+STATIC_ROOT = str(ROOT_DIR('staticfiles'))
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url
+STATIC_URL = '/static/'
+
+# See: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
+STATICFILES_DIRS = (
+    str(APPS_DIR.path('static')),
+)
+
+# See: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
+STATICFILES_FINDERS = (
+    'django.contrib.staticfiles.finders.FileSystemFinder',
+    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
+)
+
+# MEDIA CONFIGURATION
+# ------------------------------------------------------------------------------
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#media-root
+MEDIA_ROOT = str(ROOT_DIR('media'))
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#media-url
+MEDIA_URL = '/media/'
+
+# URL Configuration
+# ------------------------------------------------------------------------------
+ROOT_URLCONF = 'config.urls'
+
+# See: https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application
+WSGI_APPLICATION = 'config.wsgi.application'
+
+# AUTHENTICATION CONFIGURATION
+# ------------------------------------------------------------------------------
+AUTHENTICATION_BACKENDS = (
+    # 'django.contrib.auth.backends.ModelBackend',
+# 'allauth.account.auth_backends.AuthenticationBackend',
+    'zhiliao.core.auth_backends.MezzanineBackend',
+)
+
+# Some really nice defaults
+ACCOUNT_AUTHENTICATION_METHOD = 'username'
+ACCOUNT_EMAIL_REQUIRED = True
+ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
+
+# Custom user app defaults
+# Select the correct user model
+AUTH_USER_MODEL = 'users.User'
+LOGIN_REDIRECT_URL = 'users:redirect'
+LOGIN_URL = 'account_login'
+
+# SLUGLIFIER
+AUTOSLUG_SLUGIFY_FUNCTION = 'slugify.slugify'
+
+########## CELERY
+# INSTALLED_APPS += ('zhiliao.taskapp.celery.CeleryConfig',)
+# # if you are not using the django database broker (e.g. rabbitmq, redis, memcached), you can remove the next line.
+# INSTALLED_APPS += ('kombu.transport.django',)
+# BROKER_URL = env("CELERY_BROKER_URL", default='django://')
+########## END CELERY
+
+
+# Location of root django.contrib.admin URL, use {% url 'admin:index' %}
+ADMIN_URL = r'^admin/'
+
+# Your common stuff: Below this line define 3rd party library settings
+
+
+
+# If True, the django-modeltranslation will be added to the
+# INSTALLED_APPS setting.
+USE_MODELTRANSLATION = False
+
+
+# Hosts/domain names that are valid for this site; required if DEBUG is False
+# See https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
+ALLOWED_HOSTS = []
+
+FILE_UPLOAD_PERMISSIONS = 0664
\ No newline at end of file
Index: tests/engine.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/engine.py	(revision )
+++ tests/engine.py	(revision )
@@ -0,0 +1,154 @@
+from subprocess import call
+from os import path
+import hitchpostgres
+import hitchselenium
+import hitchpython
+import hitchserve
+import hitchredis
+import hitchtest
+import hitchsmtp
+
+
+# Get directory above this file
+PROJECT_DIRECTORY = path.abspath(path.join(path.dirname(__file__), '..'))
+
+
+class ExecutionEngine(hitchtest.ExecutionEngine):
+    """Engine for orchestating and interacting with the app."""
+
+    def set_up(self):
+        """Ensure virtualenv present, then run all services."""
+        python_package = hitchpython.PythonPackage(
+            python_version=self.settings['python_version']
+        )
+        python_package.build()
+
+        call([
+            python_package.pip, "install", "-r",
+            path.join(PROJECT_DIRECTORY, "requirements/local.txt")
+        ])
+
+        postgres_package = hitchpostgres.PostgresPackage()
+        postgres_package.build()
+
+        redis_package = hitchredis.RedisPackage()
+        redis_package.build()
+
+        self.services = hitchserve.ServiceBundle(
+            project_directory=PROJECT_DIRECTORY,
+            startup_timeout=float(self.settings["startup_timeout"]),
+            shutdown_timeout=float(self.settings["shutdown_timeout"]),
+        )
+
+        postgres_user = hitchpostgres.PostgresUser("zhiliao", "password")
+
+        self.services['Postgres'] = hitchpostgres.PostgresService(
+            postgres_package=postgres_package,
+            users=[postgres_user, ],
+            databases=[hitchpostgres.PostgresDatabase("zhiliao", postgres_user), ]
+        )
+
+        self.services['HitchSMTP'] = hitchsmtp.HitchSMTPService(port=1025)
+
+        self.services['Django'] = hitchpython.DjangoService(
+            python=python_package.python,
+            port=8000,
+            settings="config.settings.local",
+            needs=[self.services['Postgres'], ],
+            env_vars=self.settings['environment_variables'],
+        )
+
+        self.services['Redis'] = hitchredis.RedisService(
+            redis_package=redis_package,
+            port=16379,
+        )
+
+        self.services['Firefox'] = hitchselenium.SeleniumService(
+            xvfb=self.settings.get("xvfb", False),
+            no_libfaketime=True,
+        )
+
+#        import hitchcron
+#        self.services['Cron'] = hitchcron.CronService(
+#            run=self.services['Django'].manage("trigger").command,
+#            every=1,
+#            needs=[ self.services['Django'], ],
+#        )
+
+        self.services.startup(interactive=False)
+
+        # Docs : https://hitchtest.readthedocs.org/en/latest/plugins/hitchselenium.html
+        self.driver = self.services['Firefox'].driver
+
+        self.webapp = hitchselenium.SeleniumStepLibrary(
+            selenium_webdriver=self.driver,
+            wait_for_timeout=5,
+        )
+
+        # Add selenium steps
+        self.click = self.webapp.click
+        self.wait_to_appear = self.webapp.wait_to_appear
+        self.wait_to_contain = self.webapp.wait_to_contain
+        self.wait_for_any_to_contain = self.webapp.wait_for_any_to_contain
+        self.click_and_dont_wait_for_page_load = self.webapp.click_and_dont_wait_for_page_load
+
+        # Configure selenium driver
+        self.driver.set_window_size(self.settings['window_size']['height'], self.settings['window_size']['width'])
+        self.driver.set_window_position(0, 0)
+        self.driver.implicitly_wait(2.0)
+        self.driver.accept_next_alert = True
+
+    def pause(self, message=None):
+        """Stop. IPython time."""
+        if hasattr(self, 'services'):
+            self.services.start_interactive_mode()
+        self.ipython(message)
+        if hasattr(self, 'services'):
+            self.services.stop_interactive_mode()
+
+    def load_website(self):
+        """Navigate to website in Firefox."""
+        self.driver.get(self.services['Django'].url())
+
+    def fill_form(self, **kwargs):
+        """Fill in a form with id=value."""
+        for element, text in kwargs.items():
+            self.driver.find_element_by_id(element).send_keys(text)
+
+    def confirm_emails_sent(self, number):
+        """Count number of emails sent by app."""
+        assert len(self.services['HitchSMTP'].logs.json()) == int(number)
+
+    def click_on_link_in_last_email(self, which=1):
+        """Click on the nth link in the last email sent."""
+        self.driver.get(
+            self.services['HitchSMTP'].logs.json()[-1]['links'][which - 1]
+        )
+
+    def wait_for_email(self, containing=None):
+        """Wait for, and return email."""
+        self.services['HitchSMTP'].logs.out.tail.until_json(
+            lambda email: containing in email['payload'] or containing in email['subject'],
+            timeout=25,
+            lines_back=1,
+        )
+
+    def time_travel(self, days=""):
+        """Make all services think that time has skipped forward."""
+        self.services.time_travel(days=int(days))
+
+    def on_failure(self):
+        """Stop and IPython."""
+        if not self.settings['quiet']:
+            if self.settings.get("pause_on_failure", False):
+                self.pause(message=self.stacktrace.to_template())
+
+    def on_success(self):
+        """Pause on success if enabled."""
+        if self.settings.get("pause_on_success", False):
+            self.pause(message="SUCCESS")
+
+    def tear_down(self):
+        """Shut down services required to run your test."""
+        if hasattr(self, 'services'):
+            self.services.shutdown()
Index: compose/nginx/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- compose/nginx/Dockerfile	(revision )
+++ compose/nginx/Dockerfile	(revision )
@@ -0,0 +1,2 @@
+FROM nginx:latest
+ADD nginx.conf /etc/nginx/nginx.conf
\ No newline at end of file
Index: config/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/wsgi.py	(revision )
+++ config/wsgi.py	(revision )
@@ -0,0 +1,47 @@
+"""
+WSGI config for zhiliao project.
+
+This module contains the WSGI application used by Django's development server
+and any production WSGI deployments. It should expose a module-level variable
+named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
+this application via the ``WSGI_APPLICATION`` setting.
+
+Usually you will have the standard Django WSGI application here, but it also
+might make sense to replace the whole Django WSGI application with a custom one
+that later delegates to the Django one. For example, you could introduce WSGI
+middleware here, or combine a Django application with an application of another
+framework.
+
+"""
+import os
+os.environ["DJANGO_SETTINGS_MODULE"] = "config.settings.local"
+
+if os.environ.get("DJANGO_SETTINGS_MODULE") == "config.settings.production":
+    import newrelic.agent
+    newrelic.agent.initialize()
+from django.core.wsgi import get_wsgi_application
+from whitenoise.django import DjangoWhiteNoise
+if os.environ.get("+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)") == "config.settings.production":
+    from raven.contrib.django.raven_compat.middleware.wsgi import Sentry
+
+# We defer to a DJANGO_SETTINGS_MODULE already in the environment. This breaks
+# if running multiple sites in the same mod_wsgi process. To fix this, use
+# mod_wsgi daemon mode with each site in its own daemon process, or use
+
+# os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.production")
+
+# This application object is used by any WSGI server configured to use this
+# file. This includes Django's development server, if the WSGI_APPLICATION
+# setting points here.
+application = get_wsgi_application()
+
+# Use Whitenoise to serve static files
+# See: https://whitenoise.readthedocs.org/
+application = DjangoWhiteNoise(application)
+if os.environ.get("DJANGO_SETTINGS_MODULE") == "config.settings.production":
+    application = Sentry(application)
+if os.environ.get("DJANGO_SETTINGS_MODULE") == "config.settings.production":
+    application = newrelic.agent.WSGIApplicationWrapper(application)
+# Apply WSGI middleware here.
+# from helloworld.wsgi import HelloWorldApplication
+# application = HelloWorldApplication(application)
Index: zhiliao/static/sass/project.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/static/sass/project.scss	(revision )
+++ zhiliao/static/sass/project.scss	(revision )
@@ -0,0 +1,51 @@
+// project specific CSS goes here
+
+// Alert colors
+
+$white: #fff;
+$mint-green: #d6e9c6;
+$black: #000;
+$pink: #f2dede;
+$dark-pink: #eed3d7;
+$red: #b94a48;
+
+// bootstrap alert CSS, translated to the django-standard levels of
+// debug, info, success, warning, error
+
+.alert-debug {
+  background-color: $white;
+  border-color: $mint-green;
+  color: $black;
+}
+
+.alert-error {
+  background-color: $pink;
+  border-color: $dark-pink;
+  color: $red;
+}
+
+// This is a fix for the bootstrap4 alpha release
+
+@media (max-width: 47.9em) {
+  .navbar-nav .nav-item {
+    display: inline-block;
+    float: none;
+    width: 100%;
+  }
+
+  .navbar-nav .nav-item + .nav-item {
+    margin-left: 0;
+  }
+
+  .nav.navbar-nav.pull-right {
+    float: none !important;
+  }
+}
+
+// Display django-debug-toolbar.
+// See https://github.com/django-debug-toolbar/django-debug-toolbar/issues/742
+// and https://github.com/pydanny/cookiecutter-django/issues/317
+
+[hidden][style="display: block;"] {
+  display: block !important;
+}
Index: requirements.apt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements.apt	(revision )
+++ requirements.apt	(revision )
@@ -0,0 +1,44 @@
+##basic build dependencies of various Django apps for Ubuntu 14.04
+#build-essential metapackage install: make, gcc, g++, 
+build-essential
+#required to translate
+gettext
+python-dev
+
+##shared dependencies of:
+##Pillow, pylibmc
+zlib1g-dev
+
+##Postgresql and psycopg2 dependencies
+libpq-dev
+
+##Pillow dependencies
+libtiff4-dev
+libjpeg8-dev
+libfreetype6-dev
+liblcms1-dev
+libwebp-dev
+
+
+##django-extensions
+graphviz-dev
+
+##hitch
+python-setuptools
+python3-dev
+python-virtualenv
+python-pip
+firefox
+automake
+libtool
+libreadline6
+libreadline6-dev
+libreadline-dev
+libsqlite3-dev
+libxml2
+libxml2-dev
+libssl-dev
+libbz2-dev
+wget
+curl
+llvm
Index: Dockerfile-dev
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Dockerfile-dev	(revision )
+++ Dockerfile-dev	(revision )
@@ -0,0 +1,14 @@
+
+FROM python:2.7
+ENV PYTHONUNBUFFERED 1
+
+# Requirements have to be pulled and installed here, otherwise caching won't work
+COPY ./requirements /requirements
+RUN pip install -r /requirements/local.txt
+
+COPY ./compose/django/entrypoint.sh /entrypoint.sh
+RUN chmod +x /entrypoint.sh
+
+WORKDIR /app
+
+ENTRYPOINT ["/entrypoint.sh"]
Index: .pylintrc
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .pylintrc	(revision )
+++ .pylintrc	(revision )
@@ -0,0 +1,11 @@
+[MASTER]
+load-plugins=pylint_common, pylint_django, pylint_celery 
+
+[FORMAT]
+max-line-length=120
+
+[MESSAGES CONTROL]
+disable=missing-docstring,invalid-name
+
+[DESIGN]
+max-parents=13
\ No newline at end of file
Index: docs/index.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/index.rst	(revision )
+++ docs/index.rst	(revision )
@@ -0,0 +1,26 @@
+.. zhiliao documentation master file, created by
+   sphinx-quickstart.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Welcome to zhiliao's documentation!
+====================================================================
+
+Contents:
+
+.. toctree::
+   :maxdepth: 2
+
+   install
+   deploy
+   docker_ec2
+   tests
+
+
+
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
Index: zhiliao/taskapp/celery.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/taskapp/celery.py	(revision )
+++ zhiliao/taskapp/celery.py	(revision )
@@ -0,0 +1,37 @@
+
+from __future__ import absolute_import
+import os
+from celery import Celery
+from django.apps import AppConfig
+from django.conf import settings
+
+
+if not settings.configured:
+    # set the default Django settings module for the 'celery' program.
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local")  # pragma: no cover
+
+
+app = Celery('zhiliao')
+
+
+class CeleryConfig(AppConfig):
+    name = 'zhiliao.taskapp'
+    verbose_name = 'Celery Config'
+
+    def ready(self):
+        # Using a string here means the worker will not have to
+        # pickle the object when using Windows.
+        app.config_from_object('django.conf:settings')
+        app.autodiscover_tasks(lambda: settings.INSTALLED_APPS, force=True)
+
+        if hasattr(settings, 'RAVEN_CONFIG'):
+            # Celery signal registration
+            from raven import Client
+            from raven.contrib.celery import register_signal
+            client = Client(dsn=settings.RAVEN_CONFIG['DSN'])
+            register_signal(client)
+
+
+@app.task(bind=True)
+def debug_task(self):
+    print('Request: {0!r}'.format(self.request))  # pragma: no cover
Index: zhiliao/users/migrations/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/migrations/__init__.py	(revision )
+++ zhiliao/users/migrations/__init__.py	(revision )
@@ -0,0 +1,1 @@
+
\ No newline at end of file
Index: docs/Makefile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/Makefile	(revision )
+++ docs/Makefile	(revision )
@@ -0,0 +1,153 @@
+# Makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line.
+SPHINXOPTS    =
+SPHINXBUILD   = sphinx-build
+PAPER         =
+BUILDDIR      = _build
+
+# Internal variables.
+PAPEROPT_a4     = -D latex_paper_size=a4
+PAPEROPT_letter = -D latex_paper_size=letter
+ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
+# the i18n builder cannot share the environment and doctrees with the others
+I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .
+
+.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext
+
+help:
+	@echo "Please use \`make <target>' where <target> is one of"
+	@echo "  html       to make standalone HTML files"
+	@echo "  dirhtml    to make HTML files named index.html in directories"
+	@echo "  singlehtml to make a single large HTML file"
+	@echo "  pickle     to make pickle files"
+	@echo "  json       to make JSON files"
+	@echo "  htmlhelp   to make HTML files and a HTML help project"
+	@echo "  qthelp     to make HTML files and a qthelp project"
+	@echo "  devhelp    to make HTML files and a Devhelp project"
+	@echo "  epub       to make an epub"
+	@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
+	@echo "  latexpdf   to make LaTeX files and run them through pdflatex"
+	@echo "  text       to make text files"
+	@echo "  man        to make manual pages"
+	@echo "  texinfo    to make Texinfo files"
+	@echo "  info       to make Texinfo files and run them through makeinfo"
+	@echo "  gettext    to make PO message catalogs"
+	@echo "  changes    to make an overview of all changed/added/deprecated items"
+	@echo "  linkcheck  to check all external links for integrity"
+	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"
+
+clean:
+	-rm -rf $(BUILDDIR)/*
+
+html:
+	$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html
+	@echo
+	@echo "Build finished. The HTML pages are in $(BUILDDIR)/html."
+
+dirhtml:
+	$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml
+	@echo
+	@echo "Build finished. The HTML pages are in $(BUILDDIR)/dirhtml."
+
+singlehtml:
+	$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml
+	@echo
+	@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."
+
+pickle:
+	$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle
+	@echo
+	@echo "Build finished; now you can process the pickle files."
+
+json:
+	$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json
+	@echo
+	@echo "Build finished; now you can process the JSON files."
+
+htmlhelp:
+	$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp
+	@echo
+	@echo "Build finished; now you can run HTML Help Workshop with the" \
+	      ".hhp project file in $(BUILDDIR)/htmlhelp."
+
+qthelp:
+	$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp
+	@echo
+	@echo "Build finished; now you can run "qcollectiongenerator" with the" \
+	      ".qhcp project file in $(BUILDDIR)/qthelp, like this:"
+	@echo "# qcollectiongenerator $(BUILDDIR)/qthelp/zhiliao.qhcp"
+	@echo "To view the help file:"
+	@echo "# assistant -collectionFile $(BUILDDIR)/qthelp/zhiliao.qhc"
+
+devhelp:
+	$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp
+	@echo
+	@echo "Build finished."
+	@echo "To view the help file:"
+	@echo "# mkdir -p $$HOME/.local/share/devhelp/zhiliao"
+	@echo "# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/zhiliao"
+	@echo "# devhelp"
+
+epub:
+	$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub
+	@echo
+	@echo "Build finished. The epub file is in $(BUILDDIR)/epub."
+
+latex:
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
+	@echo
+	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
+	@echo "Run \`make' in that directory to run these through (pdf)latex" \
+	      "(use \`make latexpdf' here to do that automatically)."
+
+latexpdf:
+	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex
+	@echo "Running LaTeX files through pdflatex..."
+	$(MAKE) -C $(BUILDDIR)/latex all-pdf
+	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."
+
+text:
+	$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text
+	@echo
+	@echo "Build finished. The text files are in $(BUILDDIR)/text."
+
+man:
+	$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man
+	@echo
+	@echo "Build finished. The manual pages are in $(BUILDDIR)/man."
+
+texinfo:
+	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
+	@echo
+	@echo "Build finished. The Texinfo files are in $(BUILDDIR)/texinfo."
+	@echo "Run \`make' in that directory to run these through makeinfo" \
+	      "(use \`make info' here to do that automatically)."
+
+info:
+	$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo
+	@echo "Running Texinfo files through makeinfo..."
+	make -C $(BUILDDIR)/texinfo info
+	@echo "makeinfo finished; the Info files are in $(BUILDDIR)/texinfo."
+
+gettext:
+	$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale
+	@echo
+	@echo "Build finished. The message catalogs are in $(BUILDDIR)/locale."
+
+changes:
+	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes
+	@echo
+	@echo "The overview file is in $(BUILDDIR)/changes."
+
+linkcheck:
+	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck
+	@echo
+	@echo "Link check complete; look for any errors in the above output " \
+	      "or in $(BUILDDIR)/linkcheck/output.txt."
+
+doctest:
+	$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest
+	@echo "Testing of doctests in the sources finished, look at the " \
+	      "results in $(BUILDDIR)/doctest/output.txt."
Index: config/settings/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/settings/__init__.py	(revision )
+++ config/settings/__init__.py	(revision )
@@ -0,0 +1,1 @@
+# -*- coding: utf-8 -*-
Index: LICENSE
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- LICENSE	(revision )
+++ LICENSE	(revision )
@@ -0,0 +1,27 @@
+Copyright (c) 2015, gladgod
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+* Redistributions of source code must retain the above copyright notice, this
+  list of conditions and the following disclaimer.
+
+* Redistributions in binary form must reproduce the above copyright notice, this
+  list of conditions and the following disclaimer in the documentation and/or
+  other materials provided with the distribution.
+
+* Neither the name of zhiliao nor the names of its
+  contributors may be used to endorse or promote products derived from this
+  software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+OF THE POSSIBILITY OF SUCH DAMAGE.
Index: docs/conf.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/conf.py	(revision )
+++ docs/conf.py	(revision )
@@ -0,0 +1,245 @@
+# -*- coding: utf-8 -*-
+#
+# zhiliao documentation build configuration file, created by
+# sphinx-quickstart.
+#
+# This file is execfile()d with the current directory set to its containing dir.
+#
+# Note that not all possible configuration values are present in this
+# autogenerated file.
+#
+# All configuration values have a default; values that are commented out
+# serve to show the default.
+
+import os
+import sys
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+# sys.path.insert(0, os.path.abspath('.'))
+
+# -- General configuration -----------------------------------------------------
+
+# If your documentation needs a minimal Sphinx version, state it here.
+# needs_sphinx = '1.0'
+
+# Add any Sphinx extension module names here, as strings. They can be extensions
+# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
+extensions = []
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# The suffix of source filenames.
+source_suffix = '.rst'
+
+# The encoding of source files.
+# source_encoding = 'utf-8-sig'
+
+# The master toctree document.
+master_doc = 'index'
+
+# General information about the project.
+project = u'zhiliao'
+copyright = u"2015, gladgod"
+
+# The version info for the project you're documenting, acts as replacement for
+# |version| and |release|, also used in various other places throughout the
+# built documents.
+#
+# The short X.Y version.
+version = '0.1'
+# The full version, including alpha/beta/rc tags.
+release = '0.1'
+
+# The language for content autogenerated by Sphinx. Refer to documentation
+# for a list of supported languages.
+# language = None
+
+# There are two options for replacing |today|: either, you set today to some
+# non-false value, then it is used:
+# today = ''
+# Else, today_fmt is used as the format for a strftime call.
+# today_fmt = '%B %d, %Y'
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+exclude_patterns = ['_build']
+
+# The reST default role (used for this markup: `text`) to use for all documents.
+# default_role = None
+
+# If true, '()' will be appended to :func: etc. cross-reference text.
+# add_function_parentheses = True
+
+# If true, the current module name will be prepended to all description
+# unit titles (such as .. function::).
+# add_module_names = True
+
+# If true, sectionauthor and moduleauthor directives will be shown in the
+# output. They are ignored by default.
+# show_authors = False
+
+# The name of the Pygments (syntax highlighting) style to use.
+pygments_style = 'sphinx'
+
+# A list of ignored prefixes for module index sorting.
+# modindex_common_prefix = []
+
+
+# -- Options for HTML output ---------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+html_theme = 'default'
+
+# Theme options are theme-specific and customize the look and feel of a theme
+# further.  For a list of options available for each theme, see the
+# documentation.
+# html_theme_options = {}
+
+# Add any paths that contain custom themes here, relative to this directory.
+# html_theme_path = []
+
+# The name for this set of Sphinx documents.  If None, it defaults to
+# "<project> v<release> documentation".
+# html_title = None
+
+# A shorter title for the navigation bar.  Default is the same as html_title.
+# html_short_title = None
+
+# The name of an image file (relative to this directory) to place at the top
+# of the sidebar.
+# html_logo = None
+
+# The name of an image file (within the static path) to use as favicon of the
+# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
+# pixels large.
+# html_favicon = None
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
+# using the given strftime format.
+# html_last_updated_fmt = '%b %d, %Y'
+
+# If true, SmartyPants will be used to convert quotes and dashes to
+# typographically correct entities.
+# html_use_smartypants = True
+
+# Custom sidebar templates, maps document names to template names.
+# html_sidebars = {}
+
+# Additional templates that should be rendered to pages, maps page names to
+# template names.
+# html_additional_pages = {}
+
+# If false, no module index is generated.
+# html_domain_indices = True
+
+# If false, no index is generated.
+# html_use_index = True
+
+# If true, the index is split into individual pages for each letter.
+# html_split_index = False
+
+# If true, links to the reST sources are added to the pages.
+# html_show_sourcelink = True
+
+# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
+# html_show_sphinx = True
+
+# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
+# html_show_copyright = True
+
+# If true, an OpenSearch description file will be output, and all pages will
+# contain a <link> tag referring to it.  The value of this option must be the
+# base URL from which the finished HTML is served.
+# html_use_opensearch = ''
+
+# This is the file name suffix for HTML files (e.g. ".xhtml").
+# html_file_suffix = None
+
+# Output file base name for HTML help builder.
+htmlhelp_basename = 'zhiliaodoc'
+
+
+# -- Options for LaTeX output --------------------------------------------------
+
+latex_elements = {
+    # The paper size ('letterpaper' or 'a4paper').
+    # 'papersize': 'letterpaper',
+
+    # The font size ('10pt', '11pt' or '12pt').
+    # 'pointsize': '10pt',
+
+    # Additional stuff for the LaTeX preamble.
+    # 'preamble': '',
+}
+
+# Grouping the document tree into LaTeX files. List of tuples
+# (source start file, target name, title, author, documentclass [howto/manual]).
+latex_documents = [
+    ('index',
+     'zhiliao.tex',
+     u'zhiliao Documentation',
+     u"gladgod", 'manual'),
+]
+
+# The name of an image file (relative to this directory) to place at the top of
+# the title page.
+# latex_logo = None
+
+# For "manual" documents, if this is true, then toplevel headings are parts,
+# not chapters.
+# latex_use_parts = False
+
+# If true, show page references after internal links.
+# latex_show_pagerefs = False
+
+# If true, show URL addresses after external links.
+# latex_show_urls = False
+
+# Documents to append as an appendix to all manuals.
+# latex_appendices = []
+
+# If false, no module index is generated.
+# latex_domain_indices = True
+
+
+# -- Options for manual page output --------------------------------------------
+
+# One entry per manual page. List of tuples
+# (source start file, name, description, authors, manual section).
+man_pages = [
+    ('index', 'zhiliao', u'zhiliao Documentation',
+     [u"gladgod"], 1)
+]
+
+# If true, show URL addresses after external links.
+# man_show_urls = False
+
+
+# -- Options for Texinfo output ------------------------------------------------
+
+# Grouping the document tree into Texinfo files. List of tuples
+# (source start file, target name, title, author,
+#  dir menu entry, description, category)
+texinfo_documents = [
+    ('index', 'zhiliao', u'zhiliao Documentation',
+     u"gladgod", 'zhiliao',
+     'a blog for english study', 'Miscellaneous'),
+]
+
+# Documents to append as an appendix to all manuals.
+# texinfo_appendices = []
+
+# If false, no module index is generated.
+# texinfo_domain_indices = True
+
+# How to display URL addresses: 'footnote', 'no', or 'inline'.
+# texinfo_show_urls = 'footnote'
Index: zhiliao/users/tests/test_admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/tests/test_admin.py	(revision )
+++ zhiliao/users/tests/test_admin.py	(revision )
@@ -0,0 +1,40 @@
+from test_plus.test import TestCase
+
+from ..admin import MyUserCreationForm
+
+
+class TestMyUserCreationForm(TestCase):
+
+    def setUp(self):
+        self.user = self.make_user()
+
+    def test_clean_username_success(self):
+        # Instantiate the form with a new username
+        form = MyUserCreationForm({
+            'username': 'alamode',
+            'password1': '123456',
+            'password2': '123456',
+        })
+        # Run is_valid() to trigger the validation
+        valid = form.is_valid()
+        self.assertTrue(valid)
+
+        # Run the actual clean_username method
+        username = form.clean_username()
+        self.assertEqual('alamode', username)
+
+    def test_clean_username_false(self):
+        # Instantiate the form with the same username as self.user
+        form = MyUserCreationForm({
+            'username': self.user.username,
+            'password1': '123456',
+            'password2': '123456',
+        })
+        # Run is_valid() to trigger the validation, which is going to fail
+        # because the username is already taken
+        valid = form.is_valid()
+        self.assertFalse(valid)
+
+        # The form.errors dict should contain a single error called 'username'
+        self.assertTrue(len(form.errors) == 1)
+        self.assertTrue('username' in form.errors)
Index: zhiliao/contrib/sites/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/contrib/sites/__init__.py	(revision )
+++ zhiliao/contrib/sites/__init__.py	(revision )
@@ -0,0 +1,1 @@
+# -*- coding: utf-8 -*-
Index: zhiliao/users/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/models.py	(revision )
+++ zhiliao/users/models.py	(revision )
@@ -0,0 +1,22 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals, absolute_import
+
+from django.contrib.auth.models import AbstractUser
+from django.core.urlresolvers import reverse
+from django.db import models
+from django.utils.encoding import python_2_unicode_compatible
+from django.utils.translation import ugettext_lazy as _
+
+
+@python_2_unicode_compatible
+class User(AbstractUser):
+
+    # First Name and Last Name do not cover name patterns
+    # around the globe.
+    name = models.CharField(_("Name of User"), blank=True, max_length=255)
+
+    def __str__(self):
+        return self.username
+
+    def get_absolute_url(self):
+        return reverse('users:detail', kwargs={'username': self.username})
Index: requirements/production.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements/production.txt	(revision )
+++ requirements/production.txt	(revision )
@@ -0,0 +1,28 @@
+# Pro-tip: Try not to put anything here. There should be no dependency in
+#	production that isn't in development.
+-r base.txt
+
+
+
+# WSGI Handler
+# ------------------------------------------------
+gevent==1.0.2
+gunicorn==19.3.0
+
+# Static and Media Storage
+# ------------------------------------------------
+boto==2.38.0
+django-storages-redux==1.3
+
+
+# Mailgun Support
+# ---------------
+django-mailgun==0.8.0
+
+# Raven is the Sentry client
+# --------------------------
+raven
+
+# Newrelic agent for performance monitoring
+# -----------------------------------------
+newrelic
Index: tests/ci.settings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/ci.settings	(revision )
+++ tests/ci.settings	(revision )
@@ -0,0 +1,15 @@
+# Continuous integration settings for your tests
+#
+# Run with : hitch test . --settings ci.settings
+#
+# * Does not stop test run on first failure.
+# * Firefox is run headless.
+# * Start up timeout is higher (CI machines are not always powerful)
+
+failfast: false
+xvfb: true
+startup_timeout: 60
+
+# Comment out in Jenkins or other CI environments that don't print
+# color characters correctly:
+# colorless: true
Index: README.rst
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.rst	(revision )
+++ README.rst	(revision )
@@ -0,0 +1,148 @@
+zhiliao
+==============================
+
+a blog for english study
+
+
+LICENSE: BSD
+
+Settings
+------------
+
+Moved to settings_.
+
+.. _settings: http://cookiecutter-django.readthedocs.org/en/latest/settings.html
+
+Basic Commands
+--------------
+
+Setting Up Your Users
+^^^^^^^^^^^^^^^^^^^^^
+
+To create a **normal user account**, just go to Sign Up and fill out the form. Once you submit it, you'll see a "Verify Your E-mail Address" page. Go to your console to see a simulated email verification message. Copy the link into your browser. Now the user's email should be verified and ready to go.
+
+To create an **superuser account**, use this command::
+
+    $ python manage.py createsuperuser
+
+For convenience, you can keep your normal user logged in on Chrome and your superuser logged in on Firefox (or similar), so that you can see how the site behaves for both kinds of users.
+
+Test coverage
+^^^^^^^^^^^^^
+
+To run the tests, check your test coverage, and generate an HTML coverage report::
+
+    $ coverage run manage.py test
+    $ coverage html
+    $ open htmlcov/index.html
+
+Live reloading and Sass CSS compilation
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+Moved to `Live reloading and SASS compilation`_.
+
+.. _`Live reloading and SASS compilation`: http://cookiecutter-django.readthedocs.org/en/latest/live-reloading-and-sass-compilation.html
+
+
+
+Celery
+^^^^^^
+
+This app comes with Celery.
+
+To run a celery worker:
+
+.. code-block:: bash
+
+    cd zhiliao
+    celery -A zhiliao.taskapp worker -l info
+
+Please note: For Celerys import magic to work, it is important *where* the celery commands are run. If you are in the same folder with *manage.py*, you should be right.
+
+
+
+
+
+Email Server
+^^^^^^^^^^^^
+
+In development, it is often nice to be able to see emails that are being sent from your application. For this purpose,
+a Grunt task exists to start an instance of `maildump`_ which is a local SMTP server with an online interface.
+
+.. _maildump: https://github.com/ThiefMaster/maildump
+
+Make sure you have nodejs installed, and then type the following::
+
+    $ grunt start-email-server
+
+This will start an email server. The project is setup to deliver to the email server by default. To view messages
+that are sent by your application, open your browser to http://127.0.0.1:1080
+
+To stop the email server::
+
+    $ grunt stop-email-server
+
+The email server listens on 127.0.0.1:1025
+
+
+
+
+
+Sentry
+^^^^^^
+
+Sentry is an error logging aggregator service. You can sign up for a free account at http://getsentry.com or download and host it yourself.
+The system is setup with reasonable defaults, including 404 logging and integration with the WSGI application.
+
+You must set the DSN url in production.
+
+
+
+It's time to write the code!!!
+
+
+Running end to end integration tests
+------------------------------------
+
+N.B. The integration tests will not run on Windows.
+
+To install the test runner::
+
+  $ pip install hitch
+
+To run the tests, enter the zhiliao/tests directory and run the following commands::
+
+  $ hitch init
+
+Then run the stub test::
+
+  $ hitch test stub.test
+
+This will download and compile python, postgres and redis and install all python requirements so the first time it runs it may take a while.
+
+Subsequent test runs will be much quicker.
+
+The testing framework runs Django, Celery (if enabled), Postgres, HitchSMTP (a mock SMTP server), Firefox/Selenium and Redis.
+
+
+Deployment
+----------
+
+We providing tools and instructions for deploying using Docker and Heroku.
+
+Heroku
+^^^^^^
+
+.. image:: https://www.herokucdn.com/deploy/button.png
+    :target: https://heroku.com/deploy
+
+See detailed `cookiecutter-django Heroku documentation`_.
+
+.. _`cookiecutter-django Heroku documentation`: http://cookiecutter-django.readthedocs.org/en/latest/deployment-on-heroku.html
+
+Docker
+^^^^^^
+
+See detailed `cookiecutter-django Docker documentation`_.
+
+.. _`cookiecutter-django Docker documentation`: http://cookiecutter-django.readthedocs.org/en/latest/deployment-with-docker.html
Index: config/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/__init__.py	(revision )
+++ config/__init__.py	(revision )
@@ -0,0 +1,1 @@
+
\ No newline at end of file
Index: zhiliao/users/tests/test_models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- zhiliao/users/tests/test_models.py	(revision )
+++ zhiliao/users/tests/test_models.py	(revision )
@@ -0,0 +1,19 @@
+from test_plus.test import TestCase
+
+
+class TestUser(TestCase):
+
+    def setUp(self):
+        self.user = self.make_user()
+
+    def test__str__(self):
+        self.assertEqual(
+            self.user.__str__(),
+            "testuser"  # This is the default username for self.make_user()
+        )
+
+    def test_get_absolute_url(self):
+        self.assertEqual(
+            self.user.get_absolute_url(),
+            '/users/testuser/'
+        )
Index: requirements/test.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- requirements/test.txt	(revision )
+++ requirements/test.txt	(revision )
@@ -0,0 +1,9 @@
+# Test dependencies go here.
+-r base.txt
+
+
+
+coverage==4.0.2
+flake8==2.5.0
+django-test-plus==1.0.9
+factory_boy==2.6.0
Index: docs/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- docs/__init__.py	(revision )
+++ docs/__init__.py	(revision )
@@ -0,0 +1,1 @@
+# Included so that Django's startproject comment runs against the docs directory
Index: tests/tdd.settings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/tdd.settings	(revision )
+++ tests/tdd.settings	(revision )
@@ -0,0 +1,8 @@
+# Test driven development settings
+#
+# Run with : hitch test . --settings tdd.settings
+#
+# Tests stop on first failure, pause and launch into IPython for debugging/interaction.
+
+failfast: true
+pause_on_failure: true
